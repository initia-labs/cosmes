// @generated by protoc-gen-es v1.7.0 with parameter "target=ts"
// @generated from file initia/gov/v1/genesis.proto (package initia.gov.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Deposit, Vote } from "../../../cosmos/gov/v1/gov_pb.js";
import { Params, Proposal } from "./gov_pb.js";

/**
 * GenesisState defines the gov module's genesis state.
 *
 * @generated from message initia.gov.v1.GenesisState
 */
export class GenesisState extends Message<GenesisState> {
  /**
   * starting_proposal_id is the ID of the starting proposal.
   *
   * @generated from field: uint64 starting_proposal_id = 1;
   */
  startingProposalId = protoInt64.zero;

  /**
   * deposits defines all the deposits present at genesis.
   *
   * @generated from field: repeated cosmos.gov.v1.Deposit deposits = 2;
   */
  deposits: Deposit[] = [];

  /**
   * votes defines all the votes present at genesis.
   *
   * @generated from field: repeated cosmos.gov.v1.Vote votes = 3;
   */
  votes: Vote[] = [];

  /**
   * proposals defines all the proposals present at genesis.
   *
   * @generated from field: repeated initia.gov.v1.Proposal proposals = 4;
   */
  proposals: Proposal[] = [];

  /**
   * params defines all the paramaters of x/gov module.
   *
   * @generated from field: initia.gov.v1.Params params = 5;
   */
  params?: Params;

  /**
   * The constitution allows builders to lay a foundation and define purpose.
   * This is an immutable string set in genesis.
   * There are no amendments, to go outside of scope, just fork.
   * constitution is an immutable string in genesis for a chain builder to lay out their vision, ideas and ideals.
   *
   * Since: cosmos-sdk 0.50
   *
   * @generated from field: string constitution = 6;
   */
  constitution = "";

  constructor(data?: PartialMessage<GenesisState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.gov.v1.GenesisState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "starting_proposal_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "deposits", kind: "message", T: Deposit, repeated: true },
    { no: 3, name: "votes", kind: "message", T: Vote, repeated: true },
    { no: 4, name: "proposals", kind: "message", T: Proposal, repeated: true },
    { no: 5, name: "params", kind: "message", T: Params },
    { no: 6, name: "constitution", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisState {
    return new GenesisState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisState | PlainMessage<GenesisState> | undefined, b: GenesisState | PlainMessage<GenesisState> | undefined): boolean {
    return proto3.util.equals(GenesisState, a, b);
  }
}

