// @generated by protoc-gen-es v1.7.0 with parameter "target=ts"
// @generated from file initia/gov/v1/gov.proto (package initia.gov.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Duration, Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";
import { ProposalStatus, TallyResult } from "../../../cosmos/gov/v1/gov_pb.js";

/**
 * Params defines the parameters for the x/gov module.
 *
 * @generated from message initia.gov.v1.Params
 */
export class Params extends Message<Params> {
  /**
   * Minimum deposit for a proposal to enter voting period.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin min_deposit = 1;
   */
  minDeposit: Coin[] = [];

  /**
   * Maximum period for Atom holders to deposit on a proposal. Initial value: 2
   * months.
   *
   * @generated from field: google.protobuf.Duration max_deposit_period = 2;
   */
  maxDepositPeriod?: Duration;

  /**
   * Duration of the voting period.
   *
   * @generated from field: google.protobuf.Duration voting_period = 3;
   */
  votingPeriod?: Duration;

  /**
   *  Minimum percentage of total stake needed to vote for a result to be
   *  considered valid.
   *
   * @generated from field: string quorum = 4;
   */
  quorum = "";

  /**
   *  Minimum proportion of Yes votes for proposal to pass. Default value: 0.5.
   *
   * @generated from field: string threshold = 5;
   */
  threshold = "";

  /**
   *  Minimum value of Veto votes to Total votes ratio for proposal to be
   *  vetoed. Default value: 1/3.
   *
   * @generated from field: string veto_threshold = 6;
   */
  vetoThreshold = "";

  /**
   *  The ratio representing the proportion of the deposit value that must be paid at proposal submission.
   *
   * @generated from field: string min_initial_deposit_ratio = 7;
   */
  minInitialDepositRatio = "";

  /**
   * The cancel ratio which will not be returned back to the depositors when a proposal is cancelled.
   *
   * Since: cosmos-sdk 0.50
   *
   * @generated from field: string proposal_cancel_ratio = 8;
   */
  proposalCancelRatio = "";

  /**
   * The address which will receive (proposal_cancel_ratio * deposit) proposal deposits.
   * If empty, the (proposal_cancel_ratio * deposit) proposal deposits will be burned.
   *
   * Since: cosmos-sdk 0.50
   *
   * @generated from field: string proposal_cancel_dest = 9;
   */
  proposalCancelDest = "";

  /**
   * Duration of the voting period of an expedited proposal.
   *
   * Since: cosmos-sdk 0.50
   *
   * @generated from field: google.protobuf.Duration expedited_voting_period = 10;
   */
  expeditedVotingPeriod?: Duration;

  /**
   * Minimum proportion of Yes votes for proposal to pass. Default value: 0.67.
   *
   * Since: cosmos-sdk 0.50
   *
   * @generated from field: string expedited_threshold = 11;
   */
  expeditedThreshold = "";

  /**
   *  Minimum expedited deposit for a proposal to enter voting period.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin expedited_min_deposit = 12;
   */
  expeditedMinDeposit: Coin[] = [];

  /**
   * burn deposits if a proposal does not meet quorum
   *
   * @generated from field: bool burn_vote_quorum = 13;
   */
  burnVoteQuorum = false;

  /**
   * burn deposits if the proposal does not enter voting period
   *
   * @generated from field: bool burn_proposal_deposit_prevote = 14;
   */
  burnProposalDepositPrevote = false;

  /**
   * burn deposits if quorum with vote type no_veto is met
   *
   * @generated from field: bool burn_vote_veto = 15;
   */
  burnVoteVeto = false;

  /**
   * The ratio representing the proportion of the deposit value minimum that must be met when making a deposit.
   * Default value: 0.01. Meaning that for a chain with a min_deposit of 100stake, a deposit of 1stake would be
   * required.
   *
   * Since: cosmos-sdk 0.50
   *
   * @generated from field: string min_deposit_ratio = 16;
   */
  minDepositRatio = "";

  /**
   * Minimum deposit for a emergency proposal to enter voting period.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin emergency_min_deposit = 91;
   */
  emergencyMinDeposit: Coin[] = [];

  /**
   * Tally interval for emergency proposal.
   *
   * @generated from field: google.protobuf.Duration emergency_tally_interval = 92;
   */
  emergencyTallyInterval?: Duration;

  constructor(data?: PartialMessage<Params>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.gov.v1.Params";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "min_deposit", kind: "message", T: Coin, repeated: true },
    { no: 2, name: "max_deposit_period", kind: "message", T: Duration },
    { no: 3, name: "voting_period", kind: "message", T: Duration },
    { no: 4, name: "quorum", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "threshold", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "veto_threshold", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "min_initial_deposit_ratio", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "proposal_cancel_ratio", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "proposal_cancel_dest", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "expedited_voting_period", kind: "message", T: Duration },
    { no: 11, name: "expedited_threshold", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "expedited_min_deposit", kind: "message", T: Coin, repeated: true },
    { no: 13, name: "burn_vote_quorum", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 14, name: "burn_proposal_deposit_prevote", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 15, name: "burn_vote_veto", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 16, name: "min_deposit_ratio", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 91, name: "emergency_min_deposit", kind: "message", T: Coin, repeated: true },
    { no: 92, name: "emergency_tally_interval", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Params {
    return new Params().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJsonString(jsonString, options);
  }

  static equals(a: Params | PlainMessage<Params> | undefined, b: Params | PlainMessage<Params> | undefined): boolean {
    return proto3.util.equals(Params, a, b);
  }
}

/**
 * Proposal defines the core field members of a governance proposal.
 *
 * @generated from message initia.gov.v1.Proposal
 */
export class Proposal extends Message<Proposal> {
  /**
   * id defines the unique id of the proposal.
   *
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * messages are the arbitrary messages to be executed if the proposal passes.
   *
   * @generated from field: repeated google.protobuf.Any messages = 2;
   */
  messages: Any[] = [];

  /**
   * status defines the proposal status.
   *
   * @generated from field: cosmos.gov.v1.ProposalStatus status = 3;
   */
  status = ProposalStatus.UNSPECIFIED;

  /**
   * final_tally_result is the final tally result of the proposal. When
   * querying a proposal via gRPC, this field is not populated until the
   * proposal's voting period has ended.
   *
   * @generated from field: cosmos.gov.v1.TallyResult final_tally_result = 4;
   */
  finalTallyResult?: TallyResult;

  /**
   * submit_time is the time of proposal submission.
   *
   * @generated from field: google.protobuf.Timestamp submit_time = 5;
   */
  submitTime?: Timestamp;

  /**
   * deposit_end_time is the end time for deposition.
   *
   * @generated from field: google.protobuf.Timestamp deposit_end_time = 6;
   */
  depositEndTime?: Timestamp;

  /**
   * total_deposit is the total deposit on the proposal.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin total_deposit = 7;
   */
  totalDeposit: Coin[] = [];

  /**
   * voting_start_time is the starting time to vote on a proposal.
   *
   * @generated from field: google.protobuf.Timestamp voting_start_time = 8;
   */
  votingStartTime?: Timestamp;

  /**
   * voting_end_time is the end time of voting on a proposal.
   *
   * @generated from field: google.protobuf.Timestamp voting_end_time = 9;
   */
  votingEndTime?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp emergency_start_time = 10;
   */
  emergencyStartTime?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp emergency_next_tally_time = 11;
   */
  emergencyNextTallyTime?: Timestamp;

  /**
   * metadata is any arbitrary metadata attached to the proposal.
   * the recommended format of the metadata is to be found here:
   * https://docs.cosmos.network/v0.47/modules/gov#proposal-3
   *
   * @generated from field: string metadata = 12;
   */
  metadata = "";

  /**
   * title is the title of the proposal
   *
   * Since: cosmos-sdk 0.47
   *
   * @generated from field: string title = 13;
   */
  title = "";

  /**
   * summary is a short summary of the proposal
   *
   * Since: cosmos-sdk 0.47
   *
   * @generated from field: string summary = 14;
   */
  summary = "";

  /**
   * proposer is the address of the proposal sumbitter
   *
   * Since: cosmos-sdk 0.47
   *
   * @generated from field: string proposer = 15;
   */
  proposer = "";

  /**
   * expedited defines if the proposal is expedited
   *
   * Since: cosmos-sdk 0.50
   *
   * @generated from field: bool expedited = 16;
   */
  expedited = false;

  /**
   * @generated from field: bool emergency = 17;
   */
  emergency = false;

  /**
   * failed_reason defines the reason why the proposal failed
   *
   * Since: cosmos-sdk 0.50
   *
   * @generated from field: string failed_reason = 18;
   */
  failedReason = "";

  constructor(data?: PartialMessage<Proposal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.gov.v1.Proposal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "messages", kind: "message", T: Any, repeated: true },
    { no: 3, name: "status", kind: "enum", T: proto3.getEnumType(ProposalStatus) },
    { no: 4, name: "final_tally_result", kind: "message", T: TallyResult },
    { no: 5, name: "submit_time", kind: "message", T: Timestamp },
    { no: 6, name: "deposit_end_time", kind: "message", T: Timestamp },
    { no: 7, name: "total_deposit", kind: "message", T: Coin, repeated: true },
    { no: 8, name: "voting_start_time", kind: "message", T: Timestamp },
    { no: 9, name: "voting_end_time", kind: "message", T: Timestamp },
    { no: 10, name: "emergency_start_time", kind: "message", T: Timestamp },
    { no: 11, name: "emergency_next_tally_time", kind: "message", T: Timestamp },
    { no: 12, name: "metadata", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "summary", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "proposer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "expedited", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 17, name: "emergency", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 18, name: "failed_reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Proposal {
    return new Proposal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Proposal {
    return new Proposal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Proposal {
    return new Proposal().fromJsonString(jsonString, options);
  }

  static equals(a: Proposal | PlainMessage<Proposal> | undefined, b: Proposal | PlainMessage<Proposal> | undefined): boolean {
    return proto3.util.equals(Proposal, a, b);
  }
}

