// @generated by protoc-gen-es v1.7.0 with parameter "target=ts"
// @generated from file initia/intertx/v1/tx.proto (package initia.intertx.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";

/**
 * MsgRegisterAccount defines the payload for Msg/RegisterAccount
 *
 * @generated from message initia.intertx.v1.MsgRegisterAccount
 */
export class MsgRegisterAccount extends Message<MsgRegisterAccount> {
  /**
   * @generated from field: string owner = 1;
   */
  owner = "";

  /**
   * @generated from field: string connection_id = 2;
   */
  connectionId = "";

  /**
   * @generated from field: string version = 3;
   */
  version = "";

  constructor(data?: PartialMessage<MsgRegisterAccount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.intertx.v1.MsgRegisterAccount";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "connection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRegisterAccount {
    return new MsgRegisterAccount().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRegisterAccount {
    return new MsgRegisterAccount().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRegisterAccount {
    return new MsgRegisterAccount().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRegisterAccount | PlainMessage<MsgRegisterAccount> | undefined, b: MsgRegisterAccount | PlainMessage<MsgRegisterAccount> | undefined): boolean {
    return proto3.util.equals(MsgRegisterAccount, a, b);
  }
}

/**
 * MsgRegisterAccountResponse defines the response for Msg/RegisterAccount
 *
 * @generated from message initia.intertx.v1.MsgRegisterAccountResponse
 */
export class MsgRegisterAccountResponse extends Message<MsgRegisterAccountResponse> {
  constructor(data?: PartialMessage<MsgRegisterAccountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.intertx.v1.MsgRegisterAccountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRegisterAccountResponse {
    return new MsgRegisterAccountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRegisterAccountResponse {
    return new MsgRegisterAccountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRegisterAccountResponse {
    return new MsgRegisterAccountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRegisterAccountResponse | PlainMessage<MsgRegisterAccountResponse> | undefined, b: MsgRegisterAccountResponse | PlainMessage<MsgRegisterAccountResponse> | undefined): boolean {
    return proto3.util.equals(MsgRegisterAccountResponse, a, b);
  }
}

/**
 * MsgSubmitTx defines the payload for Msg/SubmitTx
 *
 * @generated from message initia.intertx.v1.MsgSubmitTx
 */
export class MsgSubmitTx extends Message<MsgSubmitTx> {
  /**
   * @generated from field: string owner = 1;
   */
  owner = "";

  /**
   * @generated from field: string connection_id = 2;
   */
  connectionId = "";

  /**
   * @generated from field: google.protobuf.Any msg = 3;
   */
  msg?: Any;

  constructor(data?: PartialMessage<MsgSubmitTx>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.intertx.v1.MsgSubmitTx";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "connection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "msg", kind: "message", T: Any },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSubmitTx {
    return new MsgSubmitTx().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSubmitTx {
    return new MsgSubmitTx().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSubmitTx {
    return new MsgSubmitTx().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSubmitTx | PlainMessage<MsgSubmitTx> | undefined, b: MsgSubmitTx | PlainMessage<MsgSubmitTx> | undefined): boolean {
    return proto3.util.equals(MsgSubmitTx, a, b);
  }
}

/**
 * MsgSubmitTxResponse defines the response for Msg/SubmitTx
 *
 * @generated from message initia.intertx.v1.MsgSubmitTxResponse
 */
export class MsgSubmitTxResponse extends Message<MsgSubmitTxResponse> {
  constructor(data?: PartialMessage<MsgSubmitTxResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.intertx.v1.MsgSubmitTxResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSubmitTxResponse {
    return new MsgSubmitTxResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSubmitTxResponse {
    return new MsgSubmitTxResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSubmitTxResponse {
    return new MsgSubmitTxResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSubmitTxResponse | PlainMessage<MsgSubmitTxResponse> | undefined, b: MsgSubmitTxResponse | PlainMessage<MsgSubmitTxResponse> | undefined): boolean {
    return proto3.util.equals(MsgSubmitTxResponse, a, b);
  }
}

