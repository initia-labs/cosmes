// @generated by protoc-gen-es v1.7.0 with parameter "target=ts"
// @generated from file initia/move/v1/authz.proto (package initia.move.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { ExecuteAuthorizationItem } from "./types_pb.js";

/**
 * PublishAuthorization defines authorization for publish a move module.
 *
 * @generated from message initia.move.v1.PublishAuthorization
 */
export class PublishAuthorization extends Message<PublishAuthorization> {
  /**
   * @generated from field: repeated string module_names = 1;
   */
  moduleNames: string[] = [];

  constructor(data?: PartialMessage<PublishAuthorization>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.move.v1.PublishAuthorization";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "module_names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublishAuthorization {
    return new PublishAuthorization().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublishAuthorization {
    return new PublishAuthorization().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublishAuthorization {
    return new PublishAuthorization().fromJsonString(jsonString, options);
  }

  static equals(a: PublishAuthorization | PlainMessage<PublishAuthorization> | undefined, b: PublishAuthorization | PlainMessage<PublishAuthorization> | undefined): boolean {
    return proto3.util.equals(PublishAuthorization, a, b);
  }
}

/**
 * ExecuteAuthorization defines authorization for execute a move function.
 *
 * @generated from message initia.move.v1.ExecuteAuthorization
 */
export class ExecuteAuthorization extends Message<ExecuteAuthorization> {
  /**
   * @generated from field: repeated initia.move.v1.ExecuteAuthorizationItem items = 1;
   */
  items: ExecuteAuthorizationItem[] = [];

  constructor(data?: PartialMessage<ExecuteAuthorization>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.move.v1.ExecuteAuthorization";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: ExecuteAuthorizationItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecuteAuthorization {
    return new ExecuteAuthorization().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecuteAuthorization {
    return new ExecuteAuthorization().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecuteAuthorization {
    return new ExecuteAuthorization().fromJsonString(jsonString, options);
  }

  static equals(a: ExecuteAuthorization | PlainMessage<ExecuteAuthorization> | undefined, b: ExecuteAuthorization | PlainMessage<ExecuteAuthorization> | undefined): boolean {
    return proto3.util.equals(ExecuteAuthorization, a, b);
  }
}

