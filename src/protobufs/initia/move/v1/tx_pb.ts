// @generated by protoc-gen-es v1.7.0 with parameter "target=ts"
// @generated from file initia/move/v1/tx.proto (package initia.move.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Params, UpgradePolicy } from "./types_pb.js";

/**
 * MsgPublish is the message to store compiled Move module
 *
 * @generated from message initia.move.v1.MsgPublish
 */
export class MsgPublish extends Message<MsgPublish> {
  /**
   * Sender is the that actor that signed the messages
   *
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * CodeBytes is raw move module bytes code
   *
   * @generated from field: repeated bytes code_bytes = 2;
   */
  codeBytes: Uint8Array[] = [];

  /**
   * UpgradePolicy defines upgrade rules which will be applied
   * at next publish message.
   * Upgrades in the direction of enhancing security are permitted.
   * `ARBITRARY` => `COMPATIBLE`
   * `ARBITRARY` => `IMMUTABLE`
   * `COMPATIBLE` => `IMMUTABLE`
   * but reverse ways are not allowed (ignored).
   *
   * @generated from field: initia.move.v1.UpgradePolicy upgrade_policy = 3;
   */
  upgradePolicy = UpgradePolicy.ARBITRARY;

  constructor(data?: PartialMessage<MsgPublish>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.move.v1.MsgPublish";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "code_bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
    { no: 3, name: "upgrade_policy", kind: "enum", T: proto3.getEnumType(UpgradePolicy) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgPublish {
    return new MsgPublish().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgPublish {
    return new MsgPublish().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgPublish {
    return new MsgPublish().fromJsonString(jsonString, options);
  }

  static equals(a: MsgPublish | PlainMessage<MsgPublish> | undefined, b: MsgPublish | PlainMessage<MsgPublish> | undefined): boolean {
    return proto3.util.equals(MsgPublish, a, b);
  }
}

/**
 * MsgPublishResponse returns store result data.
 *
 * @generated from message initia.move.v1.MsgPublishResponse
 */
export class MsgPublishResponse extends Message<MsgPublishResponse> {
  constructor(data?: PartialMessage<MsgPublishResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.move.v1.MsgPublishResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgPublishResponse {
    return new MsgPublishResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgPublishResponse {
    return new MsgPublishResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgPublishResponse {
    return new MsgPublishResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgPublishResponse | PlainMessage<MsgPublishResponse> | undefined, b: MsgPublishResponse | PlainMessage<MsgPublishResponse> | undefined): boolean {
    return proto3.util.equals(MsgPublishResponse, a, b);
  }
}

/**
 * MsgExecute is the message to execute the given module function
 *
 * @generated from message initia.move.v1.MsgExecute
 */
export class MsgExecute extends Message<MsgExecute> {
  /**
   * Sender is the that actor that signed the messages
   *
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * ModuleAddr is the address of the module deployer
   *
   * @generated from field: string module_address = 2;
   */
  moduleAddress = "";

  /**
   * ModuleName is the name of module to execute
   *
   * @generated from field: string module_name = 3;
   */
  moduleName = "";

  /**
   * FunctionName is the name of a function to execute
   *
   * @generated from field: string function_name = 4;
   */
  functionName = "";

  /**
   * TypeArgs is the type arguments of a function to execute
   * ex) "0x1::BasicCoin::Initia", "bool", "u8", "u64"
   *
   * @generated from field: repeated string type_args = 5;
   */
  typeArgs: string[] = [];

  /**
   * Args is the arguments of a function to execute
   * - number: little endian
   * - string: base64 bytes
   *
   * @generated from field: repeated bytes args = 6;
   */
  args: Uint8Array[] = [];

  constructor(data?: PartialMessage<MsgExecute>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.move.v1.MsgExecute";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "module_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "module_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "function_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "type_args", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "args", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgExecute {
    return new MsgExecute().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgExecute {
    return new MsgExecute().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgExecute {
    return new MsgExecute().fromJsonString(jsonString, options);
  }

  static equals(a: MsgExecute | PlainMessage<MsgExecute> | undefined, b: MsgExecute | PlainMessage<MsgExecute> | undefined): boolean {
    return proto3.util.equals(MsgExecute, a, b);
  }
}

/**
 * MsgExecuteResponse returns execution result data.
 *
 * @generated from message initia.move.v1.MsgExecuteResponse
 */
export class MsgExecuteResponse extends Message<MsgExecuteResponse> {
  constructor(data?: PartialMessage<MsgExecuteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.move.v1.MsgExecuteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgExecuteResponse {
    return new MsgExecuteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgExecuteResponse {
    return new MsgExecuteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgExecuteResponse {
    return new MsgExecuteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgExecuteResponse | PlainMessage<MsgExecuteResponse> | undefined, b: MsgExecuteResponse | PlainMessage<MsgExecuteResponse> | undefined): boolean {
    return proto3.util.equals(MsgExecuteResponse, a, b);
  }
}

/**
 * MsgScript is the message to execute script code with sender as signer
 *
 * @generated from message initia.move.v1.MsgScript
 */
export class MsgScript extends Message<MsgScript> {
  /**
   * Sender is the that actor that signed the messages
   *
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * CodeBytes is the script bytes code to execute
   *
   * @generated from field: bytes code_bytes = 2;
   */
  codeBytes = new Uint8Array(0);

  /**
   * TypeArgs is the type arguments of a function to execute
   * ex) "0x1::BasicCoin::Initia", "bool", "u8", "u64"
   *
   * @generated from field: repeated string type_args = 3;
   */
  typeArgs: string[] = [];

  /**
   * Args is the arguments of a function to execute
   * - number: little endian
   * - string: base64 bytes
   *
   * @generated from field: repeated bytes args = 4;
   */
  args: Uint8Array[] = [];

  constructor(data?: PartialMessage<MsgScript>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.move.v1.MsgScript";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "code_bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "type_args", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "args", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgScript {
    return new MsgScript().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgScript {
    return new MsgScript().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgScript {
    return new MsgScript().fromJsonString(jsonString, options);
  }

  static equals(a: MsgScript | PlainMessage<MsgScript> | undefined, b: MsgScript | PlainMessage<MsgScript> | undefined): boolean {
    return proto3.util.equals(MsgScript, a, b);
  }
}

/**
 * MsgScriptResponse returns execution result data.
 *
 * @generated from message initia.move.v1.MsgScriptResponse
 */
export class MsgScriptResponse extends Message<MsgScriptResponse> {
  constructor(data?: PartialMessage<MsgScriptResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.move.v1.MsgScriptResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgScriptResponse {
    return new MsgScriptResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgScriptResponse {
    return new MsgScriptResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgScriptResponse {
    return new MsgScriptResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgScriptResponse | PlainMessage<MsgScriptResponse> | undefined, b: MsgScriptResponse | PlainMessage<MsgScriptResponse> | undefined): boolean {
    return proto3.util.equals(MsgScriptResponse, a, b);
  }
}

/**
 * MsgGovPublish is the message to store compiled Move module via gov proposal
 *
 * @generated from message initia.move.v1.MsgGovPublish
 */
export class MsgGovPublish extends Message<MsgGovPublish> {
  /**
   * authority is the address that controls the module
   * (defaults to x/gov unless overwritten).
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * Sender is the that actor that signed the messages
   *
   * @generated from field: string sender = 2;
   */
  sender = "";

  /**
   * CodeBytes is raw move module bytes code
   *
   * @generated from field: repeated bytes code_bytes = 3;
   */
  codeBytes: Uint8Array[] = [];

  /**
   * UpgradePolicy defines upgrade rules which will be applied
   * at next publish message.
   * Upgrades in the direction of enhancing security are permitted.
   * `ARBITRARY` => `COMPATIBLE`
   * `ARBITRARY` => `IMMUTABLE`
   * `COMPATIBLE` => `IMMUTABLE`
   * but reverse ways are not allowed (ignored).
   *
   * @generated from field: initia.move.v1.UpgradePolicy upgrade_policy = 4;
   */
  upgradePolicy = UpgradePolicy.ARBITRARY;

  constructor(data?: PartialMessage<MsgGovPublish>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.move.v1.MsgGovPublish";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "code_bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
    { no: 4, name: "upgrade_policy", kind: "enum", T: proto3.getEnumType(UpgradePolicy) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgGovPublish {
    return new MsgGovPublish().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgGovPublish {
    return new MsgGovPublish().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgGovPublish {
    return new MsgGovPublish().fromJsonString(jsonString, options);
  }

  static equals(a: MsgGovPublish | PlainMessage<MsgGovPublish> | undefined, b: MsgGovPublish | PlainMessage<MsgGovPublish> | undefined): boolean {
    return proto3.util.equals(MsgGovPublish, a, b);
  }
}

/**
 * MsgGovPublishResponse returns execution result data.
 *
 * @generated from message initia.move.v1.MsgGovPublishResponse
 */
export class MsgGovPublishResponse extends Message<MsgGovPublishResponse> {
  constructor(data?: PartialMessage<MsgGovPublishResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.move.v1.MsgGovPublishResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgGovPublishResponse {
    return new MsgGovPublishResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgGovPublishResponse {
    return new MsgGovPublishResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgGovPublishResponse {
    return new MsgGovPublishResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgGovPublishResponse | PlainMessage<MsgGovPublishResponse> | undefined, b: MsgGovPublishResponse | PlainMessage<MsgGovPublishResponse> | undefined): boolean {
    return proto3.util.equals(MsgGovPublishResponse, a, b);
  }
}

/**
 * MsgGovExecute is the message to execute the given module
 * function via gov proposal
 *
 * @generated from message initia.move.v1.MsgGovExecute
 */
export class MsgGovExecute extends Message<MsgGovExecute> {
  /**
   * authority is the address that controls the module
   * (defaults to x/gov unless overwritten).
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * Sender is the that actor that signed the messages
   *
   * @generated from field: string sender = 2;
   */
  sender = "";

  /**
   * ModuleAddr is the address of the module deployer
   *
   * @generated from field: string module_address = 3;
   */
  moduleAddress = "";

  /**
   * ModuleName is the name of module to execute
   *
   * @generated from field: string module_name = 4;
   */
  moduleName = "";

  /**
   * FunctionName is the name of a function to execute
   *
   * @generated from field: string function_name = 5;
   */
  functionName = "";

  /**
   * TypeArgs is the type arguments of a function to execute
   * ex) "0x1::BasicCoin::Initia", "bool", "u8", "u64"
   *
   * @generated from field: repeated string type_args = 6;
   */
  typeArgs: string[] = [];

  /**
   * Args is the arguments of a function to execute
   * - number: little endian
   * - string: base64 bytes
   *
   * @generated from field: repeated bytes args = 7;
   */
  args: Uint8Array[] = [];

  constructor(data?: PartialMessage<MsgGovExecute>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.move.v1.MsgGovExecute";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "module_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "module_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "function_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "type_args", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 7, name: "args", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgGovExecute {
    return new MsgGovExecute().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgGovExecute {
    return new MsgGovExecute().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgGovExecute {
    return new MsgGovExecute().fromJsonString(jsonString, options);
  }

  static equals(a: MsgGovExecute | PlainMessage<MsgGovExecute> | undefined, b: MsgGovExecute | PlainMessage<MsgGovExecute> | undefined): boolean {
    return proto3.util.equals(MsgGovExecute, a, b);
  }
}

/**
 * MsgGovExecuteResponse returns execution result data.
 *
 * @generated from message initia.move.v1.MsgGovExecuteResponse
 */
export class MsgGovExecuteResponse extends Message<MsgGovExecuteResponse> {
  constructor(data?: PartialMessage<MsgGovExecuteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.move.v1.MsgGovExecuteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgGovExecuteResponse {
    return new MsgGovExecuteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgGovExecuteResponse {
    return new MsgGovExecuteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgGovExecuteResponse {
    return new MsgGovExecuteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgGovExecuteResponse | PlainMessage<MsgGovExecuteResponse> | undefined, b: MsgGovExecuteResponse | PlainMessage<MsgGovExecuteResponse> | undefined): boolean {
    return proto3.util.equals(MsgGovExecuteResponse, a, b);
  }
}

/**
 * MsgGovScript is the message to execute script code with sender as signer via gov
 *
 * @generated from message initia.move.v1.MsgGovScript
 */
export class MsgGovScript extends Message<MsgGovScript> {
  /**
   * authority is the address that controls the module
   * (defaults to x/gov unless overwritten).
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * Sender is the that actor that signed the messages
   *
   * @generated from field: string sender = 2;
   */
  sender = "";

  /**
   * CodeBytes is the script bytes code to execute
   *
   * @generated from field: bytes code_bytes = 3;
   */
  codeBytes = new Uint8Array(0);

  /**
   * TypeArgs is the type arguments of a function to execute
   * ex) "0x1::BasicCoin::Initia", "bool", "u8", "u64"
   *
   * @generated from field: repeated string type_args = 4;
   */
  typeArgs: string[] = [];

  /**
   * Args is the arguments of a function to execute
   * - number: little endian
   * - string: base64 bytes
   *
   * @generated from field: repeated bytes args = 5;
   */
  args: Uint8Array[] = [];

  constructor(data?: PartialMessage<MsgGovScript>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.move.v1.MsgGovScript";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "code_bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "type_args", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "args", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgGovScript {
    return new MsgGovScript().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgGovScript {
    return new MsgGovScript().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgGovScript {
    return new MsgGovScript().fromJsonString(jsonString, options);
  }

  static equals(a: MsgGovScript | PlainMessage<MsgGovScript> | undefined, b: MsgGovScript | PlainMessage<MsgGovScript> | undefined): boolean {
    return proto3.util.equals(MsgGovScript, a, b);
  }
}

/**
 * MsgGovScriptResponse returns execution result data.
 *
 * @generated from message initia.move.v1.MsgGovScriptResponse
 */
export class MsgGovScriptResponse extends Message<MsgGovScriptResponse> {
  constructor(data?: PartialMessage<MsgGovScriptResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.move.v1.MsgGovScriptResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgGovScriptResponse {
    return new MsgGovScriptResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgGovScriptResponse {
    return new MsgGovScriptResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgGovScriptResponse {
    return new MsgGovScriptResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgGovScriptResponse | PlainMessage<MsgGovScriptResponse> | undefined, b: MsgGovScriptResponse | PlainMessage<MsgGovScriptResponse> | undefined): boolean {
    return proto3.util.equals(MsgGovScriptResponse, a, b);
  }
}

/**
 * MsgWhitelist is a message to register a dex pair to
 * whitelist of various features.
 * - whitelist from coin register operation
 * - allow counter party denom can be used as gas fee
 * - register lp denom as staking denom
 *
 * @generated from message initia.move.v1.MsgWhitelist
 */
export class MsgWhitelist extends Message<MsgWhitelist> {
  /**
   * authority is the address that controls the module
   * (defaults to x/gov unless overwritten).
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * Dex coin LP metadata address
   *
   * @generated from field: string metadata_lp = 2;
   */
  metadataLp = "";

  /**
   * RewardWeight is registered to distribution's Params
   *
   * @generated from field: string reward_weight = 3;
   */
  rewardWeight = "";

  constructor(data?: PartialMessage<MsgWhitelist>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.move.v1.MsgWhitelist";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata_lp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "reward_weight", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgWhitelist {
    return new MsgWhitelist().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgWhitelist {
    return new MsgWhitelist().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgWhitelist {
    return new MsgWhitelist().fromJsonString(jsonString, options);
  }

  static equals(a: MsgWhitelist | PlainMessage<MsgWhitelist> | undefined, b: MsgWhitelist | PlainMessage<MsgWhitelist> | undefined): boolean {
    return proto3.util.equals(MsgWhitelist, a, b);
  }
}

/**
 * MsgWhitelistResponse returns result data.
 *
 * @generated from message initia.move.v1.MsgWhitelistResponse
 */
export class MsgWhitelistResponse extends Message<MsgWhitelistResponse> {
  constructor(data?: PartialMessage<MsgWhitelistResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.move.v1.MsgWhitelistResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgWhitelistResponse {
    return new MsgWhitelistResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgWhitelistResponse {
    return new MsgWhitelistResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgWhitelistResponse {
    return new MsgWhitelistResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgWhitelistResponse | PlainMessage<MsgWhitelistResponse> | undefined, b: MsgWhitelistResponse | PlainMessage<MsgWhitelistResponse> | undefined): boolean {
    return proto3.util.equals(MsgWhitelistResponse, a, b);
  }
}

/**
 * MsgDelist is a message to unregister a dex pair
 * from the whitelist of various features.
 *
 * @generated from message initia.move.v1.MsgDelist
 */
export class MsgDelist extends Message<MsgDelist> {
  /**
   * authority is the address that controls the module
   * (defaults to x/gov unless overwritten).
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * Dex coin LP metadata address
   *
   * @generated from field: string metadata_lp = 2;
   */
  metadataLp = "";

  constructor(data?: PartialMessage<MsgDelist>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.move.v1.MsgDelist";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata_lp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDelist {
    return new MsgDelist().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDelist {
    return new MsgDelist().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDelist {
    return new MsgDelist().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDelist | PlainMessage<MsgDelist> | undefined, b: MsgDelist | PlainMessage<MsgDelist> | undefined): boolean {
    return proto3.util.equals(MsgDelist, a, b);
  }
}

/**
 * MsgDelistResponse returns result data.
 *
 * @generated from message initia.move.v1.MsgDelistResponse
 */
export class MsgDelistResponse extends Message<MsgDelistResponse> {
  constructor(data?: PartialMessage<MsgDelistResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.move.v1.MsgDelistResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDelistResponse {
    return new MsgDelistResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDelistResponse {
    return new MsgDelistResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDelistResponse {
    return new MsgDelistResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDelistResponse | PlainMessage<MsgDelistResponse> | undefined, b: MsgDelistResponse | PlainMessage<MsgDelistResponse> | undefined): boolean {
    return proto3.util.equals(MsgDelistResponse, a, b);
  }
}

/**
 * MsgUpdateParams is the Msg/UpdateParams request type.
 *
 * @generated from message initia.move.v1.MsgUpdateParams
 */
export class MsgUpdateParams extends Message<MsgUpdateParams> {
  /**
   * authority is the address that controls the module
   * (defaults to x/gov unless overwritten).
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * params defines the x/staking parameters to update.
   *
   * NOTE: All parameters must be supplied.
   *
   * @generated from field: initia.move.v1.Params params = 2;
   */
  params?: Params;

  constructor(data?: PartialMessage<MsgUpdateParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.move.v1.MsgUpdateParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined, b: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParams, a, b);
  }
}

/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 *
 * @generated from message initia.move.v1.MsgUpdateParamsResponse
 */
export class MsgUpdateParamsResponse extends Message<MsgUpdateParamsResponse> {
  constructor(data?: PartialMessage<MsgUpdateParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.move.v1.MsgUpdateParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined, b: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParamsResponse, a, b);
  }
}

