// @generated by protoc-gen-es v1.7.0 with parameter "target=ts"
// @generated from file initia/move/v1/query.proto (package initia.move.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Module, Params, Resource, TableEntry, TableInfo } from "./types_pb.js";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination_pb.js";

/**
 * QueryModuleRequest is the request type for the Query/Module RPC
 * method
 *
 * @generated from message initia.move.v1.QueryModuleRequest
 */
export class QueryModuleRequest extends Message<QueryModuleRequest> {
  /**
   * address is the owner address of the module to query
   *
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * module_name is the module name to query
   *
   * @generated from field: string module_name = 2;
   */
  moduleName = "";

  constructor(data?: PartialMessage<QueryModuleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.move.v1.QueryModuleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "module_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryModuleRequest {
    return new QueryModuleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryModuleRequest {
    return new QueryModuleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryModuleRequest {
    return new QueryModuleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryModuleRequest | PlainMessage<QueryModuleRequest> | undefined, b: QueryModuleRequest | PlainMessage<QueryModuleRequest> | undefined): boolean {
    return proto3.util.equals(QueryModuleRequest, a, b);
  }
}

/**
 * QueryModuleResponse is the response type for the Query/Module RPC
 * method
 *
 * @generated from message initia.move.v1.QueryModuleResponse
 */
export class QueryModuleResponse extends Message<QueryModuleResponse> {
  /**
   * @generated from field: initia.move.v1.Module module = 1;
   */
  module?: Module;

  constructor(data?: PartialMessage<QueryModuleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.move.v1.QueryModuleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "module", kind: "message", T: Module },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryModuleResponse {
    return new QueryModuleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryModuleResponse {
    return new QueryModuleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryModuleResponse {
    return new QueryModuleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryModuleResponse | PlainMessage<QueryModuleResponse> | undefined, b: QueryModuleResponse | PlainMessage<QueryModuleResponse> | undefined): boolean {
    return proto3.util.equals(QueryModuleResponse, a, b);
  }
}

/**
 * QueryModulesRequest is the request type for the Query/Modules
 * RPC method
 *
 * @generated from message initia.move.v1.QueryModulesRequest
 */
export class QueryModulesRequest extends Message<QueryModulesRequest> {
  /**
   * address is the owner address of the modules to query
   *
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryModulesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.move.v1.QueryModulesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryModulesRequest {
    return new QueryModulesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryModulesRequest {
    return new QueryModulesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryModulesRequest {
    return new QueryModulesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryModulesRequest | PlainMessage<QueryModulesRequest> | undefined, b: QueryModulesRequest | PlainMessage<QueryModulesRequest> | undefined): boolean {
    return proto3.util.equals(QueryModulesRequest, a, b);
  }
}

/**
 * QueryModulesResponse is the response type for the
 * Query/Modules RPC method
 *
 * @generated from message initia.move.v1.QueryModulesResponse
 */
export class QueryModulesResponse extends Message<QueryModulesResponse> {
  /**
   * @generated from field: repeated initia.move.v1.Module modules = 1;
   */
  modules: Module[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryModulesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.move.v1.QueryModulesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "modules", kind: "message", T: Module, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryModulesResponse {
    return new QueryModulesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryModulesResponse {
    return new QueryModulesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryModulesResponse {
    return new QueryModulesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryModulesResponse | PlainMessage<QueryModulesResponse> | undefined, b: QueryModulesResponse | PlainMessage<QueryModulesResponse> | undefined): boolean {
    return proto3.util.equals(QueryModulesResponse, a, b);
  }
}

/**
 * QueryResourceRequest is the request type for the Query/Resource RPC
 * method
 *
 * @generated from message initia.move.v1.QueryResourceRequest
 */
export class QueryResourceRequest extends Message<QueryResourceRequest> {
  /**
   * address is the owner address of the module to query
   *
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * struct_tag is the unique identifier of the resource to query
   *
   * @generated from field: string struct_tag = 2;
   */
  structTag = "";

  constructor(data?: PartialMessage<QueryResourceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.move.v1.QueryResourceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "struct_tag", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryResourceRequest {
    return new QueryResourceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryResourceRequest {
    return new QueryResourceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryResourceRequest {
    return new QueryResourceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryResourceRequest | PlainMessage<QueryResourceRequest> | undefined, b: QueryResourceRequest | PlainMessage<QueryResourceRequest> | undefined): boolean {
    return proto3.util.equals(QueryResourceRequest, a, b);
  }
}

/**
 * QueryResourceResponse is the response type for the Query/Resource RPC
 * method
 *
 * @generated from message initia.move.v1.QueryResourceResponse
 */
export class QueryResourceResponse extends Message<QueryResourceResponse> {
  /**
   * @generated from field: initia.move.v1.Resource resource = 1;
   */
  resource?: Resource;

  constructor(data?: PartialMessage<QueryResourceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.move.v1.QueryResourceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resource", kind: "message", T: Resource },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryResourceResponse {
    return new QueryResourceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryResourceResponse {
    return new QueryResourceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryResourceResponse {
    return new QueryResourceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryResourceResponse | PlainMessage<QueryResourceResponse> | undefined, b: QueryResourceResponse | PlainMessage<QueryResourceResponse> | undefined): boolean {
    return proto3.util.equals(QueryResourceResponse, a, b);
  }
}

/**
 * QueryResourcesRequest is the request type for the Query/Resources RPC
 * method
 *
 * @generated from message initia.move.v1.QueryResourcesRequest
 */
export class QueryResourcesRequest extends Message<QueryResourcesRequest> {
  /**
   * address is the owner address of the module to query
   *
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryResourcesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.move.v1.QueryResourcesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryResourcesRequest {
    return new QueryResourcesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryResourcesRequest {
    return new QueryResourcesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryResourcesRequest {
    return new QueryResourcesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryResourcesRequest | PlainMessage<QueryResourcesRequest> | undefined, b: QueryResourcesRequest | PlainMessage<QueryResourcesRequest> | undefined): boolean {
    return proto3.util.equals(QueryResourcesRequest, a, b);
  }
}

/**
 * QueryResourcesResponse is the response type for the Query/Resources RPC
 * method
 *
 * @generated from message initia.move.v1.QueryResourcesResponse
 */
export class QueryResourcesResponse extends Message<QueryResourcesResponse> {
  /**
   * @generated from field: repeated initia.move.v1.Resource resources = 1;
   */
  resources: Resource[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryResourcesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.move.v1.QueryResourcesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resources", kind: "message", T: Resource, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryResourcesResponse {
    return new QueryResourcesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryResourcesResponse {
    return new QueryResourcesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryResourcesResponse {
    return new QueryResourcesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryResourcesResponse | PlainMessage<QueryResourcesResponse> | undefined, b: QueryResourcesResponse | PlainMessage<QueryResourcesResponse> | undefined): boolean {
    return proto3.util.equals(QueryResourcesResponse, a, b);
  }
}

/**
 * QueryTableInfoRequest is the request type for the Query/TableInfo RPC
 * method
 *
 * @generated from message initia.move.v1.QueryTableInfoRequest
 */
export class QueryTableInfoRequest extends Message<QueryTableInfoRequest> {
  /**
   * address is the table handle
   *
   * @generated from field: string address = 1;
   */
  address = "";

  constructor(data?: PartialMessage<QueryTableInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.move.v1.QueryTableInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTableInfoRequest {
    return new QueryTableInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTableInfoRequest {
    return new QueryTableInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTableInfoRequest {
    return new QueryTableInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTableInfoRequest | PlainMessage<QueryTableInfoRequest> | undefined, b: QueryTableInfoRequest | PlainMessage<QueryTableInfoRequest> | undefined): boolean {
    return proto3.util.equals(QueryTableInfoRequest, a, b);
  }
}

/**
 * QueryTableInfoResponse is the response type for the Query/TableInfo RPC
 * method
 *
 * @generated from message initia.move.v1.QueryTableInfoResponse
 */
export class QueryTableInfoResponse extends Message<QueryTableInfoResponse> {
  /**
   * @generated from field: initia.move.v1.TableInfo table_info = 1;
   */
  tableInfo?: TableInfo;

  constructor(data?: PartialMessage<QueryTableInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.move.v1.QueryTableInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "table_info", kind: "message", T: TableInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTableInfoResponse {
    return new QueryTableInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTableInfoResponse {
    return new QueryTableInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTableInfoResponse {
    return new QueryTableInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTableInfoResponse | PlainMessage<QueryTableInfoResponse> | undefined, b: QueryTableInfoResponse | PlainMessage<QueryTableInfoResponse> | undefined): boolean {
    return proto3.util.equals(QueryTableInfoResponse, a, b);
  }
}

/**
 * QueryTableEntryRequest is the request type for the Query/TableEntry RPC
 * method
 *
 * @generated from message initia.move.v1.QueryTableEntryRequest
 */
export class QueryTableEntryRequest extends Message<QueryTableEntryRequest> {
  /**
   * address is the table handle
   *
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * a key of the table entry
   *
   * @generated from field: bytes key_bytes = 2;
   */
  keyBytes = new Uint8Array(0);

  constructor(data?: PartialMessage<QueryTableEntryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.move.v1.QueryTableEntryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key_bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTableEntryRequest {
    return new QueryTableEntryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTableEntryRequest {
    return new QueryTableEntryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTableEntryRequest {
    return new QueryTableEntryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTableEntryRequest | PlainMessage<QueryTableEntryRequest> | undefined, b: QueryTableEntryRequest | PlainMessage<QueryTableEntryRequest> | undefined): boolean {
    return proto3.util.equals(QueryTableEntryRequest, a, b);
  }
}

/**
 * QueryTableEntryResponse is the response type for the Query/TableEntry RPC
 * method
 *
 * @generated from message initia.move.v1.QueryTableEntryResponse
 */
export class QueryTableEntryResponse extends Message<QueryTableEntryResponse> {
  /**
   * @generated from field: initia.move.v1.TableEntry table_entry = 1;
   */
  tableEntry?: TableEntry;

  constructor(data?: PartialMessage<QueryTableEntryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.move.v1.QueryTableEntryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "table_entry", kind: "message", T: TableEntry },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTableEntryResponse {
    return new QueryTableEntryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTableEntryResponse {
    return new QueryTableEntryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTableEntryResponse {
    return new QueryTableEntryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTableEntryResponse | PlainMessage<QueryTableEntryResponse> | undefined, b: QueryTableEntryResponse | PlainMessage<QueryTableEntryResponse> | undefined): boolean {
    return proto3.util.equals(QueryTableEntryResponse, a, b);
  }
}

/**
 * QueryTableEntriesRequest is the request type for the Query/TableEntries RPC
 * method
 *
 * @generated from message initia.move.v1.QueryTableEntriesRequest
 */
export class QueryTableEntriesRequest extends Message<QueryTableEntriesRequest> {
  /**
   * address is the table handle
   *
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryTableEntriesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.move.v1.QueryTableEntriesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTableEntriesRequest {
    return new QueryTableEntriesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTableEntriesRequest {
    return new QueryTableEntriesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTableEntriesRequest {
    return new QueryTableEntriesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTableEntriesRequest | PlainMessage<QueryTableEntriesRequest> | undefined, b: QueryTableEntriesRequest | PlainMessage<QueryTableEntriesRequest> | undefined): boolean {
    return proto3.util.equals(QueryTableEntriesRequest, a, b);
  }
}

/**
 * QueryTableEntriesResponse is the response type for the Query/TableEntries RPC
 * method
 *
 * @generated from message initia.move.v1.QueryTableEntriesResponse
 */
export class QueryTableEntriesResponse extends Message<QueryTableEntriesResponse> {
  /**
   * @generated from field: repeated initia.move.v1.TableEntry table_entries = 1;
   */
  tableEntries: TableEntry[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryTableEntriesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.move.v1.QueryTableEntriesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "table_entries", kind: "message", T: TableEntry, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTableEntriesResponse {
    return new QueryTableEntriesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTableEntriesResponse {
    return new QueryTableEntriesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTableEntriesResponse {
    return new QueryTableEntriesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTableEntriesResponse | PlainMessage<QueryTableEntriesResponse> | undefined, b: QueryTableEntriesResponse | PlainMessage<QueryTableEntriesResponse> | undefined): boolean {
    return proto3.util.equals(QueryTableEntriesResponse, a, b);
  }
}

/**
 * QueryViewFunctionRequest is the request type for the QueryyViewFunction
 * RPC method
 *
 * @generated from message initia.move.v1.QueryViewFunctionRequest
 */
export class QueryViewFunctionRequest extends Message<QueryViewFunctionRequest> {
  /**
   * Address is the owner address of the module to query
   *
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * ModuleName is the module name of the entry function to query
   *
   * @generated from field: string module_name = 2;
   */
  moduleName = "";

  /**
   * FunctionName is the name of a function to query
   *
   * @generated from field: string function_name = 3;
   */
  functionName = "";

  /**
   * TypeArgs is the type arguments of a function to execute
   * ex) "0x1::BasicCoin::Initia", "bool", "u8", "u64"
   *
   * @generated from field: repeated string type_args = 4;
   */
  typeArgs: string[] = [];

  /**
   * Args is the arguments of a function to execute
   * - number: little endian
   * - string: base64 bytes
   *
   * @generated from field: repeated bytes args = 5;
   */
  args: Uint8Array[] = [];

  constructor(data?: PartialMessage<QueryViewFunctionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.move.v1.QueryViewFunctionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "module_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "function_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "type_args", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "args", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryViewFunctionRequest {
    return new QueryViewFunctionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryViewFunctionRequest {
    return new QueryViewFunctionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryViewFunctionRequest {
    return new QueryViewFunctionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryViewFunctionRequest | PlainMessage<QueryViewFunctionRequest> | undefined, b: QueryViewFunctionRequest | PlainMessage<QueryViewFunctionRequest> | undefined): boolean {
    return proto3.util.equals(QueryViewFunctionRequest, a, b);
  }
}

/**
 * QueryViewFunctionResponse is the response type for the
 * QueryyViewFunction RPC method
 *
 * @generated from message initia.move.v1.QueryViewFunctionResponse
 */
export class QueryViewFunctionResponse extends Message<QueryViewFunctionResponse> {
  /**
   * @generated from field: string data = 1;
   */
  data = "";

  constructor(data?: PartialMessage<QueryViewFunctionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.move.v1.QueryViewFunctionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryViewFunctionResponse {
    return new QueryViewFunctionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryViewFunctionResponse {
    return new QueryViewFunctionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryViewFunctionResponse {
    return new QueryViewFunctionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryViewFunctionResponse | PlainMessage<QueryViewFunctionResponse> | undefined, b: QueryViewFunctionResponse | PlainMessage<QueryViewFunctionResponse> | undefined): boolean {
    return proto3.util.equals(QueryViewFunctionResponse, a, b);
  }
}

/**
 * QueryScriptABIRequest is the request type for the Query/ScriptABI
 * RPC method
 *
 * @generated from message initia.move.v1.QueryScriptABIRequest
 */
export class QueryScriptABIRequest extends Message<QueryScriptABIRequest> {
  /**
   * CodeBytes is the script code for query operation
   *
   * @generated from field: bytes code_bytes = 1;
   */
  codeBytes = new Uint8Array(0);

  constructor(data?: PartialMessage<QueryScriptABIRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.move.v1.QueryScriptABIRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code_bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryScriptABIRequest {
    return new QueryScriptABIRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryScriptABIRequest {
    return new QueryScriptABIRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryScriptABIRequest {
    return new QueryScriptABIRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryScriptABIRequest | PlainMessage<QueryScriptABIRequest> | undefined, b: QueryScriptABIRequest | PlainMessage<QueryScriptABIRequest> | undefined): boolean {
    return proto3.util.equals(QueryScriptABIRequest, a, b);
  }
}

/**
 * QueryScriptABIResponse is the response type for the
 * Query/ScriptABI RPC method
 *
 * @generated from message initia.move.v1.QueryScriptABIResponse
 */
export class QueryScriptABIResponse extends Message<QueryScriptABIResponse> {
  /**
   * @generated from field: bytes abi = 1;
   */
  abi = new Uint8Array(0);

  constructor(data?: PartialMessage<QueryScriptABIResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.move.v1.QueryScriptABIResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "abi", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryScriptABIResponse {
    return new QueryScriptABIResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryScriptABIResponse {
    return new QueryScriptABIResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryScriptABIResponse {
    return new QueryScriptABIResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryScriptABIResponse | PlainMessage<QueryScriptABIResponse> | undefined, b: QueryScriptABIResponse | PlainMessage<QueryScriptABIResponse> | undefined): boolean {
    return proto3.util.equals(QueryScriptABIResponse, a, b);
  }
}

/**
 * QueryParamsRequest is the request type for the Query/Params RPC method.
 *
 * @generated from message initia.move.v1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.move.v1.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 *
 * @generated from message initia.move.v1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params defines the parameters of the module.
   *
   * @generated from field: initia.move.v1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.move.v1.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

