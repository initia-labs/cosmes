// @generated by protoc-gen-es v1.7.0 with parameter "target=ts"
// @generated from file initia/distribution/v1/distribution.proto (package initia.distribution.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Coin, DecCoin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * Params defines the set of params for the distribution module.
 *
 * @generated from message initia.distribution.v1.Params
 */
export class Params extends Message<Params> {
  /**
   * @generated from field: string community_tax = 1;
   */
  communityTax = "";

  /**
   * @generated from field: bool withdraw_addr_enabled = 2;
   */
  withdrawAddrEnabled = false;

  /**
   * @generated from field: repeated initia.distribution.v1.RewardWeight reward_weights = 3;
   */
  rewardWeights: RewardWeight[] = [];

  constructor(data?: PartialMessage<Params>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.distribution.v1.Params";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "community_tax", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "withdraw_addr_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "reward_weights", kind: "message", T: RewardWeight, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Params {
    return new Params().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJsonString(jsonString, options);
  }

  static equals(a: Params | PlainMessage<Params> | undefined, b: Params | PlainMessage<Params> | undefined): boolean {
    return proto3.util.equals(Params, a, b);
  }
}

/**
 * RewardWeight represents reward allocation ratio between
 * pools.
 *
 * @generated from message initia.distribution.v1.RewardWeight
 */
export class RewardWeight extends Message<RewardWeight> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * @generated from field: string weight = 2;
   */
  weight = "";

  constructor(data?: PartialMessage<RewardWeight>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.distribution.v1.RewardWeight";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "weight", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RewardWeight {
    return new RewardWeight().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RewardWeight {
    return new RewardWeight().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RewardWeight {
    return new RewardWeight().fromJsonString(jsonString, options);
  }

  static equals(a: RewardWeight | PlainMessage<RewardWeight> | undefined, b: RewardWeight | PlainMessage<RewardWeight> | undefined): boolean {
    return proto3.util.equals(RewardWeight, a, b);
  }
}

/**
 * Pool is a Coins wrapper with denom.
 *
 * @generated from message initia.distribution.v1.Pool
 */
export class Pool extends Message<Pool> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin coins = 2;
   */
  coins: Coin[] = [];

  constructor(data?: PartialMessage<Pool>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.distribution.v1.Pool";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "coins", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Pool {
    return new Pool().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Pool {
    return new Pool().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Pool {
    return new Pool().fromJsonString(jsonString, options);
  }

  static equals(a: Pool | PlainMessage<Pool> | undefined, b: Pool | PlainMessage<Pool> | undefined): boolean {
    return proto3.util.equals(Pool, a, b);
  }
}

/**
 * DecPool is a DecCoins wrapper with denom.
 *
 * @generated from message initia.distribution.v1.DecPool
 */
export class DecPool extends Message<DecPool> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * @generated from field: repeated cosmos.base.v1beta1.DecCoin dec_coins = 2;
   */
  decCoins: DecCoin[] = [];

  constructor(data?: PartialMessage<DecPool>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.distribution.v1.DecPool";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "dec_coins", kind: "message", T: DecCoin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DecPool {
    return new DecPool().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DecPool {
    return new DecPool().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DecPool {
    return new DecPool().fromJsonString(jsonString, options);
  }

  static equals(a: DecPool | PlainMessage<DecPool> | undefined, b: DecPool | PlainMessage<DecPool> | undefined): boolean {
    return proto3.util.equals(DecPool, a, b);
  }
}

/**
 * ValidatorHistoricalRewards represents historical rewards for a validator.
 * Height is implicit within the store key.
 * Cumulative reward ratio is the sum from the zeroeth period
 * until this period of rewards / tokens, per the spec.
 * The reference count indicates the number of objects
 * which might need to reference this historical entry at any point.
 * ReferenceCount =
 *    number of outstanding delegations which ended the associated period (and
 *    might need to read that record)
 *  + number of slashes which ended the associated period (and might need to
 *  read that record)
 *  + one per validator for the zeroeth period, set on initialization
 *
 * @generated from message initia.distribution.v1.ValidatorHistoricalRewards
 */
export class ValidatorHistoricalRewards extends Message<ValidatorHistoricalRewards> {
  /**
   * @generated from field: repeated initia.distribution.v1.DecPool cumulative_reward_ratios = 1;
   */
  cumulativeRewardRatios: DecPool[] = [];

  /**
   * @generated from field: uint32 reference_count = 2;
   */
  referenceCount = 0;

  constructor(data?: PartialMessage<ValidatorHistoricalRewards>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.distribution.v1.ValidatorHistoricalRewards";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cumulative_reward_ratios", kind: "message", T: DecPool, repeated: true },
    { no: 2, name: "reference_count", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidatorHistoricalRewards {
    return new ValidatorHistoricalRewards().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidatorHistoricalRewards {
    return new ValidatorHistoricalRewards().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidatorHistoricalRewards {
    return new ValidatorHistoricalRewards().fromJsonString(jsonString, options);
  }

  static equals(a: ValidatorHistoricalRewards | PlainMessage<ValidatorHistoricalRewards> | undefined, b: ValidatorHistoricalRewards | PlainMessage<ValidatorHistoricalRewards> | undefined): boolean {
    return proto3.util.equals(ValidatorHistoricalRewards, a, b);
  }
}

/**
 * ValidatorCurrentRewards represents current rewards and current
 * period for a validator kept as a running counter and incremented
 * each block as long as the validator's tokens remain constant.
 *
 * @generated from message initia.distribution.v1.ValidatorCurrentRewards
 */
export class ValidatorCurrentRewards extends Message<ValidatorCurrentRewards> {
  /**
   * @generated from field: repeated initia.distribution.v1.DecPool rewards = 1;
   */
  rewards: DecPool[] = [];

  /**
   * @generated from field: uint64 period = 2;
   */
  period = protoInt64.zero;

  constructor(data?: PartialMessage<ValidatorCurrentRewards>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.distribution.v1.ValidatorCurrentRewards";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rewards", kind: "message", T: DecPool, repeated: true },
    { no: 2, name: "period", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidatorCurrentRewards {
    return new ValidatorCurrentRewards().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidatorCurrentRewards {
    return new ValidatorCurrentRewards().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidatorCurrentRewards {
    return new ValidatorCurrentRewards().fromJsonString(jsonString, options);
  }

  static equals(a: ValidatorCurrentRewards | PlainMessage<ValidatorCurrentRewards> | undefined, b: ValidatorCurrentRewards | PlainMessage<ValidatorCurrentRewards> | undefined): boolean {
    return proto3.util.equals(ValidatorCurrentRewards, a, b);
  }
}

/**
 * ValidatorAccumulatedCommission represents accumulated commission
 * for a validator kept as a running counter, can be withdrawn at any time.
 *
 * @generated from message initia.distribution.v1.ValidatorAccumulatedCommission
 */
export class ValidatorAccumulatedCommission extends Message<ValidatorAccumulatedCommission> {
  /**
   * @generated from field: repeated initia.distribution.v1.DecPool commissions = 1;
   */
  commissions: DecPool[] = [];

  constructor(data?: PartialMessage<ValidatorAccumulatedCommission>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.distribution.v1.ValidatorAccumulatedCommission";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "commissions", kind: "message", T: DecPool, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidatorAccumulatedCommission {
    return new ValidatorAccumulatedCommission().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidatorAccumulatedCommission {
    return new ValidatorAccumulatedCommission().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidatorAccumulatedCommission {
    return new ValidatorAccumulatedCommission().fromJsonString(jsonString, options);
  }

  static equals(a: ValidatorAccumulatedCommission | PlainMessage<ValidatorAccumulatedCommission> | undefined, b: ValidatorAccumulatedCommission | PlainMessage<ValidatorAccumulatedCommission> | undefined): boolean {
    return proto3.util.equals(ValidatorAccumulatedCommission, a, b);
  }
}

/**
 * ValidatorOutstandingRewards represents outstanding (un-withdrawn) rewards
 * for a validator inexpensive to track, allows simple sanity checks.
 *
 * @generated from message initia.distribution.v1.ValidatorOutstandingRewards
 */
export class ValidatorOutstandingRewards extends Message<ValidatorOutstandingRewards> {
  /**
   * @generated from field: repeated initia.distribution.v1.DecPool rewards = 1;
   */
  rewards: DecPool[] = [];

  constructor(data?: PartialMessage<ValidatorOutstandingRewards>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.distribution.v1.ValidatorOutstandingRewards";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rewards", kind: "message", T: DecPool, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidatorOutstandingRewards {
    return new ValidatorOutstandingRewards().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidatorOutstandingRewards {
    return new ValidatorOutstandingRewards().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidatorOutstandingRewards {
    return new ValidatorOutstandingRewards().fromJsonString(jsonString, options);
  }

  static equals(a: ValidatorOutstandingRewards | PlainMessage<ValidatorOutstandingRewards> | undefined, b: ValidatorOutstandingRewards | PlainMessage<ValidatorOutstandingRewards> | undefined): boolean {
    return proto3.util.equals(ValidatorOutstandingRewards, a, b);
  }
}

/**
 * ValidatorSlashEvent represents a validator slash event.
 * Height is implicit within the store key.
 * This is needed to calculate appropriate amount of staking tokens
 * for delegations which are withdrawn after a slash has occurred.
 *
 * @generated from message initia.distribution.v1.ValidatorSlashEvent
 */
export class ValidatorSlashEvent extends Message<ValidatorSlashEvent> {
  /**
   * @generated from field: uint64 validator_period = 1;
   */
  validatorPeriod = protoInt64.zero;

  /**
   * @generated from field: repeated cosmos.base.v1beta1.DecCoin fractions = 2;
   */
  fractions: DecCoin[] = [];

  constructor(data?: PartialMessage<ValidatorSlashEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.distribution.v1.ValidatorSlashEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "validator_period", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "fractions", kind: "message", T: DecCoin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidatorSlashEvent {
    return new ValidatorSlashEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidatorSlashEvent {
    return new ValidatorSlashEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidatorSlashEvent {
    return new ValidatorSlashEvent().fromJsonString(jsonString, options);
  }

  static equals(a: ValidatorSlashEvent | PlainMessage<ValidatorSlashEvent> | undefined, b: ValidatorSlashEvent | PlainMessage<ValidatorSlashEvent> | undefined): boolean {
    return proto3.util.equals(ValidatorSlashEvent, a, b);
  }
}

/**
 * ValidatorSlashEvents is a collection of ValidatorSlashEvent messages.
 *
 * @generated from message initia.distribution.v1.ValidatorSlashEvents
 */
export class ValidatorSlashEvents extends Message<ValidatorSlashEvents> {
  /**
   * @generated from field: repeated initia.distribution.v1.ValidatorSlashEvent validator_slash_events = 1;
   */
  validatorSlashEvents: ValidatorSlashEvent[] = [];

  constructor(data?: PartialMessage<ValidatorSlashEvents>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.distribution.v1.ValidatorSlashEvents";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "validator_slash_events", kind: "message", T: ValidatorSlashEvent, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidatorSlashEvents {
    return new ValidatorSlashEvents().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidatorSlashEvents {
    return new ValidatorSlashEvents().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidatorSlashEvents {
    return new ValidatorSlashEvents().fromJsonString(jsonString, options);
  }

  static equals(a: ValidatorSlashEvents | PlainMessage<ValidatorSlashEvents> | undefined, b: ValidatorSlashEvents | PlainMessage<ValidatorSlashEvents> | undefined): boolean {
    return proto3.util.equals(ValidatorSlashEvents, a, b);
  }
}

/**
 * DelegatorStartingInfo represents the starting info for a delegator reward
 * period. It tracks the previous validator period, the delegation's amount of
 * staking token, and the creation height (to check later on if any slashes have
 * occurred). NOTE: Even though validators are slashed to whole staking tokens,
 * the delegators within the validator may be left with less than a full token,
 * thus sdk.Dec is used.
 *
 * @generated from message initia.distribution.v1.DelegatorStartingInfo
 */
export class DelegatorStartingInfo extends Message<DelegatorStartingInfo> {
  /**
   * @generated from field: uint64 previous_period = 1;
   */
  previousPeriod = protoInt64.zero;

  /**
   * @generated from field: repeated cosmos.base.v1beta1.DecCoin stakes = 2;
   */
  stakes: DecCoin[] = [];

  /**
   * @generated from field: uint64 height = 3;
   */
  height = protoInt64.zero;

  constructor(data?: PartialMessage<DelegatorStartingInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.distribution.v1.DelegatorStartingInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "previous_period", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "stakes", kind: "message", T: DecCoin, repeated: true },
    { no: 3, name: "height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DelegatorStartingInfo {
    return new DelegatorStartingInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DelegatorStartingInfo {
    return new DelegatorStartingInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DelegatorStartingInfo {
    return new DelegatorStartingInfo().fromJsonString(jsonString, options);
  }

  static equals(a: DelegatorStartingInfo | PlainMessage<DelegatorStartingInfo> | undefined, b: DelegatorStartingInfo | PlainMessage<DelegatorStartingInfo> | undefined): boolean {
    return proto3.util.equals(DelegatorStartingInfo, a, b);
  }
}

/**
 * DelegationDelegatorReward represents the properties
 * of a delegator's delegation reward.
 *
 * @generated from message initia.distribution.v1.DelegationDelegatorReward
 */
export class DelegationDelegatorReward extends Message<DelegationDelegatorReward> {
  /**
   * @generated from field: string validator_address = 1;
   */
  validatorAddress = "";

  /**
   * @generated from field: repeated initia.distribution.v1.DecPool reward = 2;
   */
  reward: DecPool[] = [];

  constructor(data?: PartialMessage<DelegationDelegatorReward>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.distribution.v1.DelegationDelegatorReward";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "validator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "reward", kind: "message", T: DecPool, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DelegationDelegatorReward {
    return new DelegationDelegatorReward().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DelegationDelegatorReward {
    return new DelegationDelegatorReward().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DelegationDelegatorReward {
    return new DelegationDelegatorReward().fromJsonString(jsonString, options);
  }

  static equals(a: DelegationDelegatorReward | PlainMessage<DelegationDelegatorReward> | undefined, b: DelegationDelegatorReward | PlainMessage<DelegationDelegatorReward> | undefined): boolean {
    return proto3.util.equals(DelegationDelegatorReward, a, b);
  }
}

