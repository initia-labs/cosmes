// @generated by protoc-gen-es v1.7.0 with parameter "target=ts"
// @generated from file initia/reward/v1/query.proto (package initia.reward.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { Params } from "./types_pb.js";

/**
 * QueryParamsRequest is the request type for the Query/Params RPC method.
 *
 * @generated from message initia.reward.v1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.reward.v1.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 *
 * @generated from message initia.reward.v1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params defines the parameters of the module.
   *
   * @generated from field: initia.reward.v1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.reward.v1.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * QueryAnnualProvisionsRequest is the request type for the
 * Query/AnnualProvisions RPC method.
 *
 * @generated from message initia.reward.v1.QueryAnnualProvisionsRequest
 */
export class QueryAnnualProvisionsRequest extends Message<QueryAnnualProvisionsRequest> {
  constructor(data?: PartialMessage<QueryAnnualProvisionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.reward.v1.QueryAnnualProvisionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAnnualProvisionsRequest {
    return new QueryAnnualProvisionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAnnualProvisionsRequest {
    return new QueryAnnualProvisionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAnnualProvisionsRequest {
    return new QueryAnnualProvisionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAnnualProvisionsRequest | PlainMessage<QueryAnnualProvisionsRequest> | undefined, b: QueryAnnualProvisionsRequest | PlainMessage<QueryAnnualProvisionsRequest> | undefined): boolean {
    return proto3.util.equals(QueryAnnualProvisionsRequest, a, b);
  }
}

/**
 * QueryAnnualProvisionsResponse is the response type for the
 * Query/AnnualProvisions RPC method.
 *
 * @generated from message initia.reward.v1.QueryAnnualProvisionsResponse
 */
export class QueryAnnualProvisionsResponse extends Message<QueryAnnualProvisionsResponse> {
  /**
   * annual_provisions is the current minting annual provisions value.
   *
   * @generated from field: bytes annual_provisions = 1;
   */
  annualProvisions = new Uint8Array(0);

  constructor(data?: PartialMessage<QueryAnnualProvisionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.reward.v1.QueryAnnualProvisionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "annual_provisions", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAnnualProvisionsResponse {
    return new QueryAnnualProvisionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAnnualProvisionsResponse {
    return new QueryAnnualProvisionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAnnualProvisionsResponse {
    return new QueryAnnualProvisionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAnnualProvisionsResponse | PlainMessage<QueryAnnualProvisionsResponse> | undefined, b: QueryAnnualProvisionsResponse | PlainMessage<QueryAnnualProvisionsResponse> | undefined): boolean {
    return proto3.util.equals(QueryAnnualProvisionsResponse, a, b);
  }
}

/**
 * QueryLastDilutionTimestampRequest is the request type for the
 * Query/LastDilutionTimestamp RPC method.
 *
 * @generated from message initia.reward.v1.QueryLastDilutionTimestampRequest
 */
export class QueryLastDilutionTimestampRequest extends Message<QueryLastDilutionTimestampRequest> {
  constructor(data?: PartialMessage<QueryLastDilutionTimestampRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.reward.v1.QueryLastDilutionTimestampRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryLastDilutionTimestampRequest {
    return new QueryLastDilutionTimestampRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryLastDilutionTimestampRequest {
    return new QueryLastDilutionTimestampRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryLastDilutionTimestampRequest {
    return new QueryLastDilutionTimestampRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryLastDilutionTimestampRequest | PlainMessage<QueryLastDilutionTimestampRequest> | undefined, b: QueryLastDilutionTimestampRequest | PlainMessage<QueryLastDilutionTimestampRequest> | undefined): boolean {
    return proto3.util.equals(QueryLastDilutionTimestampRequest, a, b);
  }
}

/**
 * QueryLastDilutionTimestampResponse is the response type for the
 * Query/LastDilutionTimestamp RPC method.
 *
 * @generated from message initia.reward.v1.QueryLastDilutionTimestampResponse
 */
export class QueryLastDilutionTimestampResponse extends Message<QueryLastDilutionTimestampResponse> {
  /**
   * last_dilution_timestamp is the time when the last release rate dilution occurred.
   *
   * @generated from field: google.protobuf.Timestamp last_dilution_timestamp = 3;
   */
  lastDilutionTimestamp?: Timestamp;

  constructor(data?: PartialMessage<QueryLastDilutionTimestampResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "initia.reward.v1.QueryLastDilutionTimestampResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 3, name: "last_dilution_timestamp", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryLastDilutionTimestampResponse {
    return new QueryLastDilutionTimestampResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryLastDilutionTimestampResponse {
    return new QueryLastDilutionTimestampResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryLastDilutionTimestampResponse {
    return new QueryLastDilutionTimestampResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryLastDilutionTimestampResponse | PlainMessage<QueryLastDilutionTimestampResponse> | undefined, b: QueryLastDilutionTimestampResponse | PlainMessage<QueryLastDilutionTimestampResponse> | undefined): boolean {
    return proto3.util.equals(QueryLastDilutionTimestampResponse, a, b);
  }
}

