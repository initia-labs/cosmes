// @generated by protoc-gen-es v1.7.0 with parameter "target=ts"
// @generated from file injective/types/v1beta1/tx_response.proto (package injective.types.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * base header ak message type, we can cast the bytes into corresponding message
 * response type
 *
 * @generated from message injective.types.v1beta1.TxResponseGenericMessage
 */
export class TxResponseGenericMessage extends Message<TxResponseGenericMessage> {
  /**
   * @generated from field: string header = 1;
   */
  header = "";

  /**
   * @generated from field: bytes data = 2;
   */
  data = new Uint8Array(0);

  constructor(data?: PartialMessage<TxResponseGenericMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.types.v1beta1.TxResponseGenericMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "header", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TxResponseGenericMessage {
    return new TxResponseGenericMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TxResponseGenericMessage {
    return new TxResponseGenericMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TxResponseGenericMessage {
    return new TxResponseGenericMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TxResponseGenericMessage | PlainMessage<TxResponseGenericMessage> | undefined, b: TxResponseGenericMessage | PlainMessage<TxResponseGenericMessage> | undefined): boolean {
    return proto3.util.equals(TxResponseGenericMessage, a, b);
  }
}

/**
 * improvised message to unpack length prefixed messages in tx response data
 *
 * @generated from message injective.types.v1beta1.TxResponseData
 */
export class TxResponseData extends Message<TxResponseData> {
  /**
   * @generated from field: repeated injective.types.v1beta1.TxResponseGenericMessage messages = 1;
   */
  messages: TxResponseGenericMessage[] = [];

  constructor(data?: PartialMessage<TxResponseData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.types.v1beta1.TxResponseData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "messages", kind: "message", T: TxResponseGenericMessage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TxResponseData {
    return new TxResponseData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TxResponseData {
    return new TxResponseData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TxResponseData {
    return new TxResponseData().fromJsonString(jsonString, options);
  }

  static equals(a: TxResponseData | PlainMessage<TxResponseData> | undefined, b: TxResponseData | PlainMessage<TxResponseData> | undefined): boolean {
    return proto3.util.equals(TxResponseData, a, b);
  }
}

