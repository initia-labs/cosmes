// @generated by protoc-gen-es v1.7.0 with parameter "target=ts"
// @generated from file injective/exchange/v1beta1/authz.proto (package injective.exchange.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * spot authz messages
 *
 * @generated from message injective.exchange.v1beta1.CreateSpotLimitOrderAuthz
 */
export class CreateSpotLimitOrderAuthz extends Message<CreateSpotLimitOrderAuthz> {
  /**
   * @generated from field: string subaccount_id = 1;
   */
  subaccountId = "";

  /**
   * @generated from field: repeated string market_ids = 2;
   */
  marketIds: string[] = [];

  constructor(data?: PartialMessage<CreateSpotLimitOrderAuthz>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.CreateSpotLimitOrderAuthz";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subaccount_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "market_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSpotLimitOrderAuthz {
    return new CreateSpotLimitOrderAuthz().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSpotLimitOrderAuthz {
    return new CreateSpotLimitOrderAuthz().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSpotLimitOrderAuthz {
    return new CreateSpotLimitOrderAuthz().fromJsonString(jsonString, options);
  }

  static equals(a: CreateSpotLimitOrderAuthz | PlainMessage<CreateSpotLimitOrderAuthz> | undefined, b: CreateSpotLimitOrderAuthz | PlainMessage<CreateSpotLimitOrderAuthz> | undefined): boolean {
    return proto3.util.equals(CreateSpotLimitOrderAuthz, a, b);
  }
}

/**
 * @generated from message injective.exchange.v1beta1.CreateSpotMarketOrderAuthz
 */
export class CreateSpotMarketOrderAuthz extends Message<CreateSpotMarketOrderAuthz> {
  /**
   * @generated from field: string subaccount_id = 1;
   */
  subaccountId = "";

  /**
   * @generated from field: repeated string market_ids = 2;
   */
  marketIds: string[] = [];

  constructor(data?: PartialMessage<CreateSpotMarketOrderAuthz>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.CreateSpotMarketOrderAuthz";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subaccount_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "market_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSpotMarketOrderAuthz {
    return new CreateSpotMarketOrderAuthz().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSpotMarketOrderAuthz {
    return new CreateSpotMarketOrderAuthz().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSpotMarketOrderAuthz {
    return new CreateSpotMarketOrderAuthz().fromJsonString(jsonString, options);
  }

  static equals(a: CreateSpotMarketOrderAuthz | PlainMessage<CreateSpotMarketOrderAuthz> | undefined, b: CreateSpotMarketOrderAuthz | PlainMessage<CreateSpotMarketOrderAuthz> | undefined): boolean {
    return proto3.util.equals(CreateSpotMarketOrderAuthz, a, b);
  }
}

/**
 * @generated from message injective.exchange.v1beta1.BatchCreateSpotLimitOrdersAuthz
 */
export class BatchCreateSpotLimitOrdersAuthz extends Message<BatchCreateSpotLimitOrdersAuthz> {
  /**
   * @generated from field: string subaccount_id = 1;
   */
  subaccountId = "";

  /**
   * @generated from field: repeated string market_ids = 2;
   */
  marketIds: string[] = [];

  constructor(data?: PartialMessage<BatchCreateSpotLimitOrdersAuthz>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.BatchCreateSpotLimitOrdersAuthz";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subaccount_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "market_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchCreateSpotLimitOrdersAuthz {
    return new BatchCreateSpotLimitOrdersAuthz().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchCreateSpotLimitOrdersAuthz {
    return new BatchCreateSpotLimitOrdersAuthz().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchCreateSpotLimitOrdersAuthz {
    return new BatchCreateSpotLimitOrdersAuthz().fromJsonString(jsonString, options);
  }

  static equals(a: BatchCreateSpotLimitOrdersAuthz | PlainMessage<BatchCreateSpotLimitOrdersAuthz> | undefined, b: BatchCreateSpotLimitOrdersAuthz | PlainMessage<BatchCreateSpotLimitOrdersAuthz> | undefined): boolean {
    return proto3.util.equals(BatchCreateSpotLimitOrdersAuthz, a, b);
  }
}

/**
 * @generated from message injective.exchange.v1beta1.CancelSpotOrderAuthz
 */
export class CancelSpotOrderAuthz extends Message<CancelSpotOrderAuthz> {
  /**
   * @generated from field: string subaccount_id = 1;
   */
  subaccountId = "";

  /**
   * @generated from field: repeated string market_ids = 2;
   */
  marketIds: string[] = [];

  constructor(data?: PartialMessage<CancelSpotOrderAuthz>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.CancelSpotOrderAuthz";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subaccount_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "market_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CancelSpotOrderAuthz {
    return new CancelSpotOrderAuthz().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CancelSpotOrderAuthz {
    return new CancelSpotOrderAuthz().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CancelSpotOrderAuthz {
    return new CancelSpotOrderAuthz().fromJsonString(jsonString, options);
  }

  static equals(a: CancelSpotOrderAuthz | PlainMessage<CancelSpotOrderAuthz> | undefined, b: CancelSpotOrderAuthz | PlainMessage<CancelSpotOrderAuthz> | undefined): boolean {
    return proto3.util.equals(CancelSpotOrderAuthz, a, b);
  }
}

/**
 * @generated from message injective.exchange.v1beta1.BatchCancelSpotOrdersAuthz
 */
export class BatchCancelSpotOrdersAuthz extends Message<BatchCancelSpotOrdersAuthz> {
  /**
   * @generated from field: string subaccount_id = 1;
   */
  subaccountId = "";

  /**
   * @generated from field: repeated string market_ids = 2;
   */
  marketIds: string[] = [];

  constructor(data?: PartialMessage<BatchCancelSpotOrdersAuthz>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.BatchCancelSpotOrdersAuthz";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subaccount_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "market_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchCancelSpotOrdersAuthz {
    return new BatchCancelSpotOrdersAuthz().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchCancelSpotOrdersAuthz {
    return new BatchCancelSpotOrdersAuthz().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchCancelSpotOrdersAuthz {
    return new BatchCancelSpotOrdersAuthz().fromJsonString(jsonString, options);
  }

  static equals(a: BatchCancelSpotOrdersAuthz | PlainMessage<BatchCancelSpotOrdersAuthz> | undefined, b: BatchCancelSpotOrdersAuthz | PlainMessage<BatchCancelSpotOrdersAuthz> | undefined): boolean {
    return proto3.util.equals(BatchCancelSpotOrdersAuthz, a, b);
  }
}

/**
 * derivative authz messages
 *
 * @generated from message injective.exchange.v1beta1.CreateDerivativeLimitOrderAuthz
 */
export class CreateDerivativeLimitOrderAuthz extends Message<CreateDerivativeLimitOrderAuthz> {
  /**
   * @generated from field: string subaccount_id = 1;
   */
  subaccountId = "";

  /**
   * @generated from field: repeated string market_ids = 2;
   */
  marketIds: string[] = [];

  constructor(data?: PartialMessage<CreateDerivativeLimitOrderAuthz>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.CreateDerivativeLimitOrderAuthz";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subaccount_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "market_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateDerivativeLimitOrderAuthz {
    return new CreateDerivativeLimitOrderAuthz().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateDerivativeLimitOrderAuthz {
    return new CreateDerivativeLimitOrderAuthz().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateDerivativeLimitOrderAuthz {
    return new CreateDerivativeLimitOrderAuthz().fromJsonString(jsonString, options);
  }

  static equals(a: CreateDerivativeLimitOrderAuthz | PlainMessage<CreateDerivativeLimitOrderAuthz> | undefined, b: CreateDerivativeLimitOrderAuthz | PlainMessage<CreateDerivativeLimitOrderAuthz> | undefined): boolean {
    return proto3.util.equals(CreateDerivativeLimitOrderAuthz, a, b);
  }
}

/**
 * @generated from message injective.exchange.v1beta1.CreateDerivativeMarketOrderAuthz
 */
export class CreateDerivativeMarketOrderAuthz extends Message<CreateDerivativeMarketOrderAuthz> {
  /**
   * @generated from field: string subaccount_id = 1;
   */
  subaccountId = "";

  /**
   * @generated from field: repeated string market_ids = 2;
   */
  marketIds: string[] = [];

  constructor(data?: PartialMessage<CreateDerivativeMarketOrderAuthz>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.CreateDerivativeMarketOrderAuthz";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subaccount_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "market_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateDerivativeMarketOrderAuthz {
    return new CreateDerivativeMarketOrderAuthz().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateDerivativeMarketOrderAuthz {
    return new CreateDerivativeMarketOrderAuthz().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateDerivativeMarketOrderAuthz {
    return new CreateDerivativeMarketOrderAuthz().fromJsonString(jsonString, options);
  }

  static equals(a: CreateDerivativeMarketOrderAuthz | PlainMessage<CreateDerivativeMarketOrderAuthz> | undefined, b: CreateDerivativeMarketOrderAuthz | PlainMessage<CreateDerivativeMarketOrderAuthz> | undefined): boolean {
    return proto3.util.equals(CreateDerivativeMarketOrderAuthz, a, b);
  }
}

/**
 * @generated from message injective.exchange.v1beta1.BatchCreateDerivativeLimitOrdersAuthz
 */
export class BatchCreateDerivativeLimitOrdersAuthz extends Message<BatchCreateDerivativeLimitOrdersAuthz> {
  /**
   * @generated from field: string subaccount_id = 1;
   */
  subaccountId = "";

  /**
   * @generated from field: repeated string market_ids = 2;
   */
  marketIds: string[] = [];

  constructor(data?: PartialMessage<BatchCreateDerivativeLimitOrdersAuthz>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.BatchCreateDerivativeLimitOrdersAuthz";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subaccount_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "market_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchCreateDerivativeLimitOrdersAuthz {
    return new BatchCreateDerivativeLimitOrdersAuthz().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchCreateDerivativeLimitOrdersAuthz {
    return new BatchCreateDerivativeLimitOrdersAuthz().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchCreateDerivativeLimitOrdersAuthz {
    return new BatchCreateDerivativeLimitOrdersAuthz().fromJsonString(jsonString, options);
  }

  static equals(a: BatchCreateDerivativeLimitOrdersAuthz | PlainMessage<BatchCreateDerivativeLimitOrdersAuthz> | undefined, b: BatchCreateDerivativeLimitOrdersAuthz | PlainMessage<BatchCreateDerivativeLimitOrdersAuthz> | undefined): boolean {
    return proto3.util.equals(BatchCreateDerivativeLimitOrdersAuthz, a, b);
  }
}

/**
 * @generated from message injective.exchange.v1beta1.CancelDerivativeOrderAuthz
 */
export class CancelDerivativeOrderAuthz extends Message<CancelDerivativeOrderAuthz> {
  /**
   * @generated from field: string subaccount_id = 1;
   */
  subaccountId = "";

  /**
   * @generated from field: repeated string market_ids = 2;
   */
  marketIds: string[] = [];

  constructor(data?: PartialMessage<CancelDerivativeOrderAuthz>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.CancelDerivativeOrderAuthz";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subaccount_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "market_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CancelDerivativeOrderAuthz {
    return new CancelDerivativeOrderAuthz().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CancelDerivativeOrderAuthz {
    return new CancelDerivativeOrderAuthz().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CancelDerivativeOrderAuthz {
    return new CancelDerivativeOrderAuthz().fromJsonString(jsonString, options);
  }

  static equals(a: CancelDerivativeOrderAuthz | PlainMessage<CancelDerivativeOrderAuthz> | undefined, b: CancelDerivativeOrderAuthz | PlainMessage<CancelDerivativeOrderAuthz> | undefined): boolean {
    return proto3.util.equals(CancelDerivativeOrderAuthz, a, b);
  }
}

/**
 * @generated from message injective.exchange.v1beta1.BatchCancelDerivativeOrdersAuthz
 */
export class BatchCancelDerivativeOrdersAuthz extends Message<BatchCancelDerivativeOrdersAuthz> {
  /**
   * @generated from field: string subaccount_id = 1;
   */
  subaccountId = "";

  /**
   * @generated from field: repeated string market_ids = 2;
   */
  marketIds: string[] = [];

  constructor(data?: PartialMessage<BatchCancelDerivativeOrdersAuthz>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.BatchCancelDerivativeOrdersAuthz";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subaccount_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "market_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchCancelDerivativeOrdersAuthz {
    return new BatchCancelDerivativeOrdersAuthz().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchCancelDerivativeOrdersAuthz {
    return new BatchCancelDerivativeOrdersAuthz().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchCancelDerivativeOrdersAuthz {
    return new BatchCancelDerivativeOrdersAuthz().fromJsonString(jsonString, options);
  }

  static equals(a: BatchCancelDerivativeOrdersAuthz | PlainMessage<BatchCancelDerivativeOrdersAuthz> | undefined, b: BatchCancelDerivativeOrdersAuthz | PlainMessage<BatchCancelDerivativeOrdersAuthz> | undefined): boolean {
    return proto3.util.equals(BatchCancelDerivativeOrdersAuthz, a, b);
  }
}

/**
 * common authz message used in both spot & derivative markets
 *
 * @generated from message injective.exchange.v1beta1.BatchUpdateOrdersAuthz
 */
export class BatchUpdateOrdersAuthz extends Message<BatchUpdateOrdersAuthz> {
  /**
   * @generated from field: string subaccount_id = 1;
   */
  subaccountId = "";

  /**
   * @generated from field: repeated string spot_markets = 2;
   */
  spotMarkets: string[] = [];

  /**
   * @generated from field: repeated string derivative_markets = 3;
   */
  derivativeMarkets: string[] = [];

  constructor(data?: PartialMessage<BatchUpdateOrdersAuthz>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.BatchUpdateOrdersAuthz";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subaccount_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "spot_markets", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "derivative_markets", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchUpdateOrdersAuthz {
    return new BatchUpdateOrdersAuthz().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchUpdateOrdersAuthz {
    return new BatchUpdateOrdersAuthz().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchUpdateOrdersAuthz {
    return new BatchUpdateOrdersAuthz().fromJsonString(jsonString, options);
  }

  static equals(a: BatchUpdateOrdersAuthz | PlainMessage<BatchUpdateOrdersAuthz> | undefined, b: BatchUpdateOrdersAuthz | PlainMessage<BatchUpdateOrdersAuthz> | undefined): boolean {
    return proto3.util.equals(BatchUpdateOrdersAuthz, a, b);
  }
}

