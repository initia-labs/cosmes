// @generated by protoc-gen-es v1.7.0 with parameter "target=ts"
// @generated from file injective/wasmx/v1/tx.proto (package injective.wasmx.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Params } from "./wasmx_pb.js";
import { ContractRegistrationRequest } from "./proposal_pb.js";

/**
 * MsgExecuteContractCompat submits the given message data to a smart contract,
 * compatible with EIP712
 *
 * @generated from message injective.wasmx.v1.MsgExecuteContractCompat
 */
export class MsgExecuteContractCompat extends Message<MsgExecuteContractCompat> {
  /**
   * Sender is the that actor that signed the messages
   *
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * Contract is the address of the smart contract
   *
   * @generated from field: string contract = 2;
   */
  contract = "";

  /**
   * Msg json encoded message to be passed to the contract
   *
   * @generated from field: string msg = 3;
   */
  msg = "";

  /**
   * Funds coins that are transferred to the contract on execution
   *
   * @generated from field: string funds = 4;
   */
  funds = "";

  constructor(data?: PartialMessage<MsgExecuteContractCompat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.wasmx.v1.MsgExecuteContractCompat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "msg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "funds", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgExecuteContractCompat {
    return new MsgExecuteContractCompat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgExecuteContractCompat {
    return new MsgExecuteContractCompat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgExecuteContractCompat {
    return new MsgExecuteContractCompat().fromJsonString(jsonString, options);
  }

  static equals(a: MsgExecuteContractCompat | PlainMessage<MsgExecuteContractCompat> | undefined, b: MsgExecuteContractCompat | PlainMessage<MsgExecuteContractCompat> | undefined): boolean {
    return proto3.util.equals(MsgExecuteContractCompat, a, b);
  }
}

/**
 * MsgExecuteContractCompatResponse returns execution result data.
 *
 * @generated from message injective.wasmx.v1.MsgExecuteContractCompatResponse
 */
export class MsgExecuteContractCompatResponse extends Message<MsgExecuteContractCompatResponse> {
  /**
   * Data contains bytes to returned from the contract
   *
   * @generated from field: bytes data = 1;
   */
  data = new Uint8Array(0);

  constructor(data?: PartialMessage<MsgExecuteContractCompatResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.wasmx.v1.MsgExecuteContractCompatResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgExecuteContractCompatResponse {
    return new MsgExecuteContractCompatResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgExecuteContractCompatResponse {
    return new MsgExecuteContractCompatResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgExecuteContractCompatResponse {
    return new MsgExecuteContractCompatResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgExecuteContractCompatResponse | PlainMessage<MsgExecuteContractCompatResponse> | undefined, b: MsgExecuteContractCompatResponse | PlainMessage<MsgExecuteContractCompatResponse> | undefined): boolean {
    return proto3.util.equals(MsgExecuteContractCompatResponse, a, b);
  }
}

/**
 * @generated from message injective.wasmx.v1.MsgUpdateContract
 */
export class MsgUpdateContract extends Message<MsgUpdateContract> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * Unique Identifier for contract instance to be registered.
   *
   * @generated from field: string contract_address = 2;
   */
  contractAddress = "";

  /**
   * Maximum gas to be used for the smart contract execution.
   *
   * @generated from field: uint64 gas_limit = 3;
   */
  gasLimit = protoInt64.zero;

  /**
   * gas price to be used for the smart contract execution.
   *
   * @generated from field: uint64 gas_price = 4;
   */
  gasPrice = protoInt64.zero;

  /**
   * optional - admin account that will be allowed to perform any changes
   *
   * @generated from field: string admin_address = 5;
   */
  adminAddress = "";

  constructor(data?: PartialMessage<MsgUpdateContract>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.wasmx.v1.MsgUpdateContract";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "contract_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "gas_limit", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "gas_price", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "admin_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateContract {
    return new MsgUpdateContract().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateContract {
    return new MsgUpdateContract().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateContract {
    return new MsgUpdateContract().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateContract | PlainMessage<MsgUpdateContract> | undefined, b: MsgUpdateContract | PlainMessage<MsgUpdateContract> | undefined): boolean {
    return proto3.util.equals(MsgUpdateContract, a, b);
  }
}

/**
 * @generated from message injective.wasmx.v1.MsgUpdateContractResponse
 */
export class MsgUpdateContractResponse extends Message<MsgUpdateContractResponse> {
  constructor(data?: PartialMessage<MsgUpdateContractResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.wasmx.v1.MsgUpdateContractResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateContractResponse {
    return new MsgUpdateContractResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateContractResponse {
    return new MsgUpdateContractResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateContractResponse {
    return new MsgUpdateContractResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateContractResponse | PlainMessage<MsgUpdateContractResponse> | undefined, b: MsgUpdateContractResponse | PlainMessage<MsgUpdateContractResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateContractResponse, a, b);
  }
}

/**
 * @generated from message injective.wasmx.v1.MsgActivateContract
 */
export class MsgActivateContract extends Message<MsgActivateContract> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * Unique Identifier for contract instance to be activated.
   *
   * @generated from field: string contract_address = 2;
   */
  contractAddress = "";

  constructor(data?: PartialMessage<MsgActivateContract>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.wasmx.v1.MsgActivateContract";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "contract_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgActivateContract {
    return new MsgActivateContract().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgActivateContract {
    return new MsgActivateContract().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgActivateContract {
    return new MsgActivateContract().fromJsonString(jsonString, options);
  }

  static equals(a: MsgActivateContract | PlainMessage<MsgActivateContract> | undefined, b: MsgActivateContract | PlainMessage<MsgActivateContract> | undefined): boolean {
    return proto3.util.equals(MsgActivateContract, a, b);
  }
}

/**
 * @generated from message injective.wasmx.v1.MsgActivateContractResponse
 */
export class MsgActivateContractResponse extends Message<MsgActivateContractResponse> {
  constructor(data?: PartialMessage<MsgActivateContractResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.wasmx.v1.MsgActivateContractResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgActivateContractResponse {
    return new MsgActivateContractResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgActivateContractResponse {
    return new MsgActivateContractResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgActivateContractResponse {
    return new MsgActivateContractResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgActivateContractResponse | PlainMessage<MsgActivateContractResponse> | undefined, b: MsgActivateContractResponse | PlainMessage<MsgActivateContractResponse> | undefined): boolean {
    return proto3.util.equals(MsgActivateContractResponse, a, b);
  }
}

/**
 * @generated from message injective.wasmx.v1.MsgDeactivateContract
 */
export class MsgDeactivateContract extends Message<MsgDeactivateContract> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * Unique Identifier for contract instance to be deactivated.
   *
   * @generated from field: string contract_address = 2;
   */
  contractAddress = "";

  constructor(data?: PartialMessage<MsgDeactivateContract>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.wasmx.v1.MsgDeactivateContract";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "contract_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDeactivateContract {
    return new MsgDeactivateContract().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDeactivateContract {
    return new MsgDeactivateContract().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDeactivateContract {
    return new MsgDeactivateContract().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDeactivateContract | PlainMessage<MsgDeactivateContract> | undefined, b: MsgDeactivateContract | PlainMessage<MsgDeactivateContract> | undefined): boolean {
    return proto3.util.equals(MsgDeactivateContract, a, b);
  }
}

/**
 * @generated from message injective.wasmx.v1.MsgDeactivateContractResponse
 */
export class MsgDeactivateContractResponse extends Message<MsgDeactivateContractResponse> {
  constructor(data?: PartialMessage<MsgDeactivateContractResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.wasmx.v1.MsgDeactivateContractResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDeactivateContractResponse {
    return new MsgDeactivateContractResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDeactivateContractResponse {
    return new MsgDeactivateContractResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDeactivateContractResponse {
    return new MsgDeactivateContractResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDeactivateContractResponse | PlainMessage<MsgDeactivateContractResponse> | undefined, b: MsgDeactivateContractResponse | PlainMessage<MsgDeactivateContractResponse> | undefined): boolean {
    return proto3.util.equals(MsgDeactivateContractResponse, a, b);
  }
}

/**
 * @generated from message injective.wasmx.v1.MsgUpdateParams
 */
export class MsgUpdateParams extends Message<MsgUpdateParams> {
  /**
   * authority is the address of the governance account.
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * params defines the wasmx parameters to update.
   *
   * NOTE: All parameters must be supplied.
   *
   * @generated from field: injective.wasmx.v1.Params params = 2;
   */
  params?: Params;

  constructor(data?: PartialMessage<MsgUpdateParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.wasmx.v1.MsgUpdateParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined, b: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParams, a, b);
  }
}

/**
 * @generated from message injective.wasmx.v1.MsgUpdateParamsResponse
 */
export class MsgUpdateParamsResponse extends Message<MsgUpdateParamsResponse> {
  constructor(data?: PartialMessage<MsgUpdateParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.wasmx.v1.MsgUpdateParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined, b: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParamsResponse, a, b);
  }
}

/**
 * @generated from message injective.wasmx.v1.MsgRegisterContract
 */
export class MsgRegisterContract extends Message<MsgRegisterContract> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: injective.wasmx.v1.ContractRegistrationRequest contract_registration_request = 2;
   */
  contractRegistrationRequest?: ContractRegistrationRequest;

  constructor(data?: PartialMessage<MsgRegisterContract>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.wasmx.v1.MsgRegisterContract";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "contract_registration_request", kind: "message", T: ContractRegistrationRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRegisterContract {
    return new MsgRegisterContract().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRegisterContract {
    return new MsgRegisterContract().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRegisterContract {
    return new MsgRegisterContract().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRegisterContract | PlainMessage<MsgRegisterContract> | undefined, b: MsgRegisterContract | PlainMessage<MsgRegisterContract> | undefined): boolean {
    return proto3.util.equals(MsgRegisterContract, a, b);
  }
}

/**
 * @generated from message injective.wasmx.v1.MsgRegisterContractResponse
 */
export class MsgRegisterContractResponse extends Message<MsgRegisterContractResponse> {
  constructor(data?: PartialMessage<MsgRegisterContractResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.wasmx.v1.MsgRegisterContractResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRegisterContractResponse {
    return new MsgRegisterContractResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRegisterContractResponse {
    return new MsgRegisterContractResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRegisterContractResponse {
    return new MsgRegisterContractResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRegisterContractResponse | PlainMessage<MsgRegisterContractResponse> | undefined, b: MsgRegisterContractResponse | PlainMessage<MsgRegisterContractResponse> | undefined): boolean {
    return proto3.util.equals(MsgRegisterContractResponse, a, b);
  }
}

