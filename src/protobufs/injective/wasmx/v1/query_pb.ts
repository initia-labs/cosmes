// @generated by protoc-gen-es v1.7.0 with parameter "target=ts"
// @generated from file injective/wasmx/v1/query.proto (package injective.wasmx.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Params, RegisteredContract } from "./wasmx_pb.js";
import { GenesisState } from "./genesis_pb.js";

/**
 * QueryWasmxParamsRequest is the request type for the Query/WasmxParams RPC
 * method.
 *
 * @generated from message injective.wasmx.v1.QueryWasmxParamsRequest
 */
export class QueryWasmxParamsRequest extends Message<QueryWasmxParamsRequest> {
  constructor(data?: PartialMessage<QueryWasmxParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.wasmx.v1.QueryWasmxParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryWasmxParamsRequest {
    return new QueryWasmxParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryWasmxParamsRequest {
    return new QueryWasmxParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryWasmxParamsRequest {
    return new QueryWasmxParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryWasmxParamsRequest | PlainMessage<QueryWasmxParamsRequest> | undefined, b: QueryWasmxParamsRequest | PlainMessage<QueryWasmxParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryWasmxParamsRequest, a, b);
  }
}

/**
 * QueryWasmxParamsRequest is the response type for the Query/WasmxParams RPC
 * method.
 *
 * @generated from message injective.wasmx.v1.QueryWasmxParamsResponse
 */
export class QueryWasmxParamsResponse extends Message<QueryWasmxParamsResponse> {
  /**
   * @generated from field: injective.wasmx.v1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryWasmxParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.wasmx.v1.QueryWasmxParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryWasmxParamsResponse {
    return new QueryWasmxParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryWasmxParamsResponse {
    return new QueryWasmxParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryWasmxParamsResponse {
    return new QueryWasmxParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryWasmxParamsResponse | PlainMessage<QueryWasmxParamsResponse> | undefined, b: QueryWasmxParamsResponse | PlainMessage<QueryWasmxParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryWasmxParamsResponse, a, b);
  }
}

/**
 * QueryModuleStateRequest is the request type for the Query/WasmxModuleState
 * RPC method.
 *
 * @generated from message injective.wasmx.v1.QueryModuleStateRequest
 */
export class QueryModuleStateRequest extends Message<QueryModuleStateRequest> {
  constructor(data?: PartialMessage<QueryModuleStateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.wasmx.v1.QueryModuleStateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryModuleStateRequest {
    return new QueryModuleStateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryModuleStateRequest {
    return new QueryModuleStateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryModuleStateRequest {
    return new QueryModuleStateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryModuleStateRequest | PlainMessage<QueryModuleStateRequest> | undefined, b: QueryModuleStateRequest | PlainMessage<QueryModuleStateRequest> | undefined): boolean {
    return proto3.util.equals(QueryModuleStateRequest, a, b);
  }
}

/**
 * QueryModuleStateResponse is the response type for the Query/WasmxModuleState
 * RPC method.
 *
 * @generated from message injective.wasmx.v1.QueryModuleStateResponse
 */
export class QueryModuleStateResponse extends Message<QueryModuleStateResponse> {
  /**
   * @generated from field: injective.wasmx.v1.GenesisState state = 1;
   */
  state?: GenesisState;

  constructor(data?: PartialMessage<QueryModuleStateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.wasmx.v1.QueryModuleStateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state", kind: "message", T: GenesisState },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryModuleStateResponse {
    return new QueryModuleStateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryModuleStateResponse {
    return new QueryModuleStateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryModuleStateResponse {
    return new QueryModuleStateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryModuleStateResponse | PlainMessage<QueryModuleStateResponse> | undefined, b: QueryModuleStateResponse | PlainMessage<QueryModuleStateResponse> | undefined): boolean {
    return proto3.util.equals(QueryModuleStateResponse, a, b);
  }
}

/**
 * Contract registration info
 *
 * @generated from message injective.wasmx.v1.QueryContractRegistrationInfoRequest
 */
export class QueryContractRegistrationInfoRequest extends Message<QueryContractRegistrationInfoRequest> {
  /**
   * @generated from field: string contract_address = 1;
   */
  contractAddress = "";

  constructor(data?: PartialMessage<QueryContractRegistrationInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.wasmx.v1.QueryContractRegistrationInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contract_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryContractRegistrationInfoRequest {
    return new QueryContractRegistrationInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryContractRegistrationInfoRequest {
    return new QueryContractRegistrationInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryContractRegistrationInfoRequest {
    return new QueryContractRegistrationInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryContractRegistrationInfoRequest | PlainMessage<QueryContractRegistrationInfoRequest> | undefined, b: QueryContractRegistrationInfoRequest | PlainMessage<QueryContractRegistrationInfoRequest> | undefined): boolean {
    return proto3.util.equals(QueryContractRegistrationInfoRequest, a, b);
  }
}

/**
 * @generated from message injective.wasmx.v1.QueryContractRegistrationInfoResponse
 */
export class QueryContractRegistrationInfoResponse extends Message<QueryContractRegistrationInfoResponse> {
  /**
   * @generated from field: injective.wasmx.v1.RegisteredContract contract = 1;
   */
  contract?: RegisteredContract;

  constructor(data?: PartialMessage<QueryContractRegistrationInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.wasmx.v1.QueryContractRegistrationInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contract", kind: "message", T: RegisteredContract },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryContractRegistrationInfoResponse {
    return new QueryContractRegistrationInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryContractRegistrationInfoResponse {
    return new QueryContractRegistrationInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryContractRegistrationInfoResponse {
    return new QueryContractRegistrationInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryContractRegistrationInfoResponse | PlainMessage<QueryContractRegistrationInfoResponse> | undefined, b: QueryContractRegistrationInfoResponse | PlainMessage<QueryContractRegistrationInfoResponse> | undefined): boolean {
    return proto3.util.equals(QueryContractRegistrationInfoResponse, a, b);
  }
}

