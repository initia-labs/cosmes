// @generated by protoc-gen-es v1.7.0 with parameter "target=ts"
// @generated from file injective/insurance/v1beta1/events.proto (package injective.insurance.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { InsuranceFund, RedemptionSchedule } from "./insurance_pb.js";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * @generated from message injective.insurance.v1beta1.EventInsuranceFundUpdate
 */
export class EventInsuranceFundUpdate extends Message<EventInsuranceFundUpdate> {
  /**
   * @generated from field: injective.insurance.v1beta1.InsuranceFund fund = 1;
   */
  fund?: InsuranceFund;

  constructor(data?: PartialMessage<EventInsuranceFundUpdate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.insurance.v1beta1.EventInsuranceFundUpdate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fund", kind: "message", T: InsuranceFund },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventInsuranceFundUpdate {
    return new EventInsuranceFundUpdate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventInsuranceFundUpdate {
    return new EventInsuranceFundUpdate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventInsuranceFundUpdate {
    return new EventInsuranceFundUpdate().fromJsonString(jsonString, options);
  }

  static equals(a: EventInsuranceFundUpdate | PlainMessage<EventInsuranceFundUpdate> | undefined, b: EventInsuranceFundUpdate | PlainMessage<EventInsuranceFundUpdate> | undefined): boolean {
    return proto3.util.equals(EventInsuranceFundUpdate, a, b);
  }
}

/**
 * @generated from message injective.insurance.v1beta1.EventRequestRedemption
 */
export class EventRequestRedemption extends Message<EventRequestRedemption> {
  /**
   * @generated from field: injective.insurance.v1beta1.RedemptionSchedule schedule = 1;
   */
  schedule?: RedemptionSchedule;

  constructor(data?: PartialMessage<EventRequestRedemption>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.insurance.v1beta1.EventRequestRedemption";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "schedule", kind: "message", T: RedemptionSchedule },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventRequestRedemption {
    return new EventRequestRedemption().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventRequestRedemption {
    return new EventRequestRedemption().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventRequestRedemption {
    return new EventRequestRedemption().fromJsonString(jsonString, options);
  }

  static equals(a: EventRequestRedemption | PlainMessage<EventRequestRedemption> | undefined, b: EventRequestRedemption | PlainMessage<EventRequestRedemption> | undefined): boolean {
    return proto3.util.equals(EventRequestRedemption, a, b);
  }
}

/**
 * @generated from message injective.insurance.v1beta1.EventWithdrawRedemption
 */
export class EventWithdrawRedemption extends Message<EventWithdrawRedemption> {
  /**
   * redemption schedule triggered withdraw
   *
   * @generated from field: injective.insurance.v1beta1.RedemptionSchedule schedule = 1;
   */
  schedule?: RedemptionSchedule;

  /**
   * redeem coin amount in base_currency
   *
   * @generated from field: cosmos.base.v1beta1.Coin redeem_coin = 2;
   */
  redeemCoin?: Coin;

  constructor(data?: PartialMessage<EventWithdrawRedemption>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.insurance.v1beta1.EventWithdrawRedemption";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "schedule", kind: "message", T: RedemptionSchedule },
    { no: 2, name: "redeem_coin", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventWithdrawRedemption {
    return new EventWithdrawRedemption().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventWithdrawRedemption {
    return new EventWithdrawRedemption().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventWithdrawRedemption {
    return new EventWithdrawRedemption().fromJsonString(jsonString, options);
  }

  static equals(a: EventWithdrawRedemption | PlainMessage<EventWithdrawRedemption> | undefined, b: EventWithdrawRedemption | PlainMessage<EventWithdrawRedemption> | undefined): boolean {
    return proto3.util.equals(EventWithdrawRedemption, a, b);
  }
}

/**
 * @generated from message injective.insurance.v1beta1.EventUnderwrite
 */
export class EventUnderwrite extends Message<EventUnderwrite> {
  /**
   * address of the underwriter
   *
   * @generated from field: string underwriter = 1;
   */
  underwriter = "";

  /**
   * marketId of insurance fund for the redemption
   *
   * @generated from field: string marketId = 2;
   */
  marketId = "";

  /**
   * deposit coin amount
   *
   * @generated from field: cosmos.base.v1beta1.Coin deposit = 3;
   */
  deposit?: Coin;

  /**
   * share coin amount
   *
   * @generated from field: cosmos.base.v1beta1.Coin shares = 4;
   */
  shares?: Coin;

  constructor(data?: PartialMessage<EventUnderwrite>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.insurance.v1beta1.EventUnderwrite";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "underwriter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "marketId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "deposit", kind: "message", T: Coin },
    { no: 4, name: "shares", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventUnderwrite {
    return new EventUnderwrite().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventUnderwrite {
    return new EventUnderwrite().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventUnderwrite {
    return new EventUnderwrite().fromJsonString(jsonString, options);
  }

  static equals(a: EventUnderwrite | PlainMessage<EventUnderwrite> | undefined, b: EventUnderwrite | PlainMessage<EventUnderwrite> | undefined): boolean {
    return proto3.util.equals(EventUnderwrite, a, b);
  }
}

/**
 * @generated from message injective.insurance.v1beta1.EventInsuranceWithdraw
 */
export class EventInsuranceWithdraw extends Message<EventInsuranceWithdraw> {
  /**
   * @generated from field: string market_id = 1;
   */
  marketId = "";

  /**
   * @generated from field: string market_ticker = 2;
   */
  marketTicker = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin withdrawal = 3;
   */
  withdrawal?: Coin;

  constructor(data?: PartialMessage<EventInsuranceWithdraw>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.insurance.v1beta1.EventInsuranceWithdraw";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "market_ticker", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "withdrawal", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventInsuranceWithdraw {
    return new EventInsuranceWithdraw().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventInsuranceWithdraw {
    return new EventInsuranceWithdraw().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventInsuranceWithdraw {
    return new EventInsuranceWithdraw().fromJsonString(jsonString, options);
  }

  static equals(a: EventInsuranceWithdraw | PlainMessage<EventInsuranceWithdraw> | undefined, b: EventInsuranceWithdraw | PlainMessage<EventInsuranceWithdraw> | undefined): boolean {
    return proto3.util.equals(EventInsuranceWithdraw, a, b);
  }
}

