// @generated by protoc-gen-es v1.7.0 with parameter "target=ts"
// @generated from file injective/insurance/v1beta1/genesis.proto (package injective.insurance.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { InsuranceFund, Params, RedemptionSchedule } from "./insurance_pb.js";

/**
 * GenesisState defines the insurance module's genesis state.
 *
 * @generated from message injective.insurance.v1beta1.GenesisState
 */
export class GenesisState extends Message<GenesisState> {
  /**
   * params defines all the parameters of related to insurance.
   *
   * @generated from field: injective.insurance.v1beta1.Params params = 1;
   */
  params?: Params;

  /**
   * insurance_funds describes the insurance funds available for derivative
   * markets
   *
   * @generated from field: repeated injective.insurance.v1beta1.InsuranceFund insurance_funds = 2;
   */
  insuranceFunds: InsuranceFund[] = [];

  /**
   * redemption_schedule describes the redemption requests pending
   *
   * @generated from field: repeated injective.insurance.v1beta1.RedemptionSchedule redemption_schedule = 3;
   */
  redemptionSchedule: RedemptionSchedule[] = [];

  /**
   * next_share_denom_id describes the next share denom id to be used for newly
   * creating insurance fund incremented by 1 per insurance fund creation
   *
   * @generated from field: uint64 next_share_denom_id = 4;
   */
  nextShareDenomId = protoInt64.zero;

  /**
   * next_redemption_schedule_id describes next redemption schedule id to be
   * used for next schedule incremented by 1 per redemption request
   *
   * @generated from field: uint64 next_redemption_schedule_id = 5;
   */
  nextRedemptionScheduleId = protoInt64.zero;

  constructor(data?: PartialMessage<GenesisState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.insurance.v1beta1.GenesisState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
    { no: 2, name: "insurance_funds", kind: "message", T: InsuranceFund, repeated: true },
    { no: 3, name: "redemption_schedule", kind: "message", T: RedemptionSchedule, repeated: true },
    { no: 4, name: "next_share_denom_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "next_redemption_schedule_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisState {
    return new GenesisState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisState | PlainMessage<GenesisState> | undefined, b: GenesisState | PlainMessage<GenesisState> | undefined): boolean {
    return proto3.util.equals(GenesisState, a, b);
  }
}

