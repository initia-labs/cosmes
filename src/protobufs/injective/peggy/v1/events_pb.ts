// @generated by protoc-gen-es v1.7.0 with parameter "target=ts"
// @generated from file injective/peggy/v1/events.proto (package injective.peggy.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { ClaimType } from "./attestation_pb.js";
import { BridgeValidator } from "./types_pb.js";

/**
 * @generated from message injective.peggy.v1.EventAttestationObserved
 */
export class EventAttestationObserved extends Message<EventAttestationObserved> {
  /**
   * @generated from field: injective.peggy.v1.ClaimType attestation_type = 1;
   */
  attestationType = ClaimType.UNKNOWN;

  /**
   * @generated from field: string bridge_contract = 2;
   */
  bridgeContract = "";

  /**
   * @generated from field: uint64 bridge_chain_id = 3;
   */
  bridgeChainId = protoInt64.zero;

  /**
   * @generated from field: bytes attestation_id = 4;
   */
  attestationId = new Uint8Array(0);

  /**
   * @generated from field: uint64 nonce = 5;
   */
  nonce = protoInt64.zero;

  constructor(data?: PartialMessage<EventAttestationObserved>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.peggy.v1.EventAttestationObserved";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "attestation_type", kind: "enum", T: proto3.getEnumType(ClaimType) },
    { no: 2, name: "bridge_contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "bridge_chain_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "attestation_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventAttestationObserved {
    return new EventAttestationObserved().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventAttestationObserved {
    return new EventAttestationObserved().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventAttestationObserved {
    return new EventAttestationObserved().fromJsonString(jsonString, options);
  }

  static equals(a: EventAttestationObserved | PlainMessage<EventAttestationObserved> | undefined, b: EventAttestationObserved | PlainMessage<EventAttestationObserved> | undefined): boolean {
    return proto3.util.equals(EventAttestationObserved, a, b);
  }
}

/**
 * @generated from message injective.peggy.v1.EventBridgeWithdrawCanceled
 */
export class EventBridgeWithdrawCanceled extends Message<EventBridgeWithdrawCanceled> {
  /**
   * @generated from field: string bridge_contract = 1;
   */
  bridgeContract = "";

  /**
   * @generated from field: uint64 bridge_chain_id = 2;
   */
  bridgeChainId = protoInt64.zero;

  constructor(data?: PartialMessage<EventBridgeWithdrawCanceled>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.peggy.v1.EventBridgeWithdrawCanceled";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bridge_contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "bridge_chain_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventBridgeWithdrawCanceled {
    return new EventBridgeWithdrawCanceled().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventBridgeWithdrawCanceled {
    return new EventBridgeWithdrawCanceled().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventBridgeWithdrawCanceled {
    return new EventBridgeWithdrawCanceled().fromJsonString(jsonString, options);
  }

  static equals(a: EventBridgeWithdrawCanceled | PlainMessage<EventBridgeWithdrawCanceled> | undefined, b: EventBridgeWithdrawCanceled | PlainMessage<EventBridgeWithdrawCanceled> | undefined): boolean {
    return proto3.util.equals(EventBridgeWithdrawCanceled, a, b);
  }
}

/**
 * @generated from message injective.peggy.v1.EventOutgoingBatch
 */
export class EventOutgoingBatch extends Message<EventOutgoingBatch> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * @generated from field: string orchestrator_address = 2;
   */
  orchestratorAddress = "";

  /**
   * @generated from field: uint64 batch_nonce = 3;
   */
  batchNonce = protoInt64.zero;

  /**
   * @generated from field: uint64 batch_timeout = 4;
   */
  batchTimeout = protoInt64.zero;

  /**
   * @generated from field: repeated uint64 batch_tx_ids = 5;
   */
  batchTxIds: bigint[] = [];

  constructor(data?: PartialMessage<EventOutgoingBatch>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.peggy.v1.EventOutgoingBatch";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "orchestrator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "batch_nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "batch_timeout", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "batch_tx_ids", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventOutgoingBatch {
    return new EventOutgoingBatch().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventOutgoingBatch {
    return new EventOutgoingBatch().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventOutgoingBatch {
    return new EventOutgoingBatch().fromJsonString(jsonString, options);
  }

  static equals(a: EventOutgoingBatch | PlainMessage<EventOutgoingBatch> | undefined, b: EventOutgoingBatch | PlainMessage<EventOutgoingBatch> | undefined): boolean {
    return proto3.util.equals(EventOutgoingBatch, a, b);
  }
}

/**
 * @generated from message injective.peggy.v1.EventOutgoingBatchCanceled
 */
export class EventOutgoingBatchCanceled extends Message<EventOutgoingBatchCanceled> {
  /**
   * @generated from field: string bridge_contract = 1;
   */
  bridgeContract = "";

  /**
   * @generated from field: uint64 bridge_chain_id = 2;
   */
  bridgeChainId = protoInt64.zero;

  /**
   * @generated from field: uint64 batch_id = 3;
   */
  batchId = protoInt64.zero;

  /**
   * @generated from field: uint64 nonce = 4;
   */
  nonce = protoInt64.zero;

  constructor(data?: PartialMessage<EventOutgoingBatchCanceled>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.peggy.v1.EventOutgoingBatchCanceled";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bridge_contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "bridge_chain_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "batch_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventOutgoingBatchCanceled {
    return new EventOutgoingBatchCanceled().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventOutgoingBatchCanceled {
    return new EventOutgoingBatchCanceled().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventOutgoingBatchCanceled {
    return new EventOutgoingBatchCanceled().fromJsonString(jsonString, options);
  }

  static equals(a: EventOutgoingBatchCanceled | PlainMessage<EventOutgoingBatchCanceled> | undefined, b: EventOutgoingBatchCanceled | PlainMessage<EventOutgoingBatchCanceled> | undefined): boolean {
    return proto3.util.equals(EventOutgoingBatchCanceled, a, b);
  }
}

/**
 * @generated from message injective.peggy.v1.EventValsetUpdateRequest
 */
export class EventValsetUpdateRequest extends Message<EventValsetUpdateRequest> {
  /**
   * @generated from field: uint64 valset_nonce = 1;
   */
  valsetNonce = protoInt64.zero;

  /**
   * @generated from field: uint64 valset_height = 2;
   */
  valsetHeight = protoInt64.zero;

  /**
   * @generated from field: repeated injective.peggy.v1.BridgeValidator valset_members = 3;
   */
  valsetMembers: BridgeValidator[] = [];

  /**
   * @generated from field: string reward_amount = 4;
   */
  rewardAmount = "";

  /**
   * @generated from field: string reward_token = 5;
   */
  rewardToken = "";

  constructor(data?: PartialMessage<EventValsetUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.peggy.v1.EventValsetUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "valset_nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "valset_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "valset_members", kind: "message", T: BridgeValidator, repeated: true },
    { no: 4, name: "reward_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "reward_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventValsetUpdateRequest {
    return new EventValsetUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventValsetUpdateRequest {
    return new EventValsetUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventValsetUpdateRequest {
    return new EventValsetUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: EventValsetUpdateRequest | PlainMessage<EventValsetUpdateRequest> | undefined, b: EventValsetUpdateRequest | PlainMessage<EventValsetUpdateRequest> | undefined): boolean {
    return proto3.util.equals(EventValsetUpdateRequest, a, b);
  }
}

/**
 * @generated from message injective.peggy.v1.EventSetOrchestratorAddresses
 */
export class EventSetOrchestratorAddresses extends Message<EventSetOrchestratorAddresses> {
  /**
   * @generated from field: string validator_address = 1;
   */
  validatorAddress = "";

  /**
   * @generated from field: string orchestrator_address = 2;
   */
  orchestratorAddress = "";

  /**
   * @generated from field: string operator_eth_address = 3;
   */
  operatorEthAddress = "";

  constructor(data?: PartialMessage<EventSetOrchestratorAddresses>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.peggy.v1.EventSetOrchestratorAddresses";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "validator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "orchestrator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "operator_eth_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventSetOrchestratorAddresses {
    return new EventSetOrchestratorAddresses().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventSetOrchestratorAddresses {
    return new EventSetOrchestratorAddresses().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventSetOrchestratorAddresses {
    return new EventSetOrchestratorAddresses().fromJsonString(jsonString, options);
  }

  static equals(a: EventSetOrchestratorAddresses | PlainMessage<EventSetOrchestratorAddresses> | undefined, b: EventSetOrchestratorAddresses | PlainMessage<EventSetOrchestratorAddresses> | undefined): boolean {
    return proto3.util.equals(EventSetOrchestratorAddresses, a, b);
  }
}

/**
 * @generated from message injective.peggy.v1.EventValsetConfirm
 */
export class EventValsetConfirm extends Message<EventValsetConfirm> {
  /**
   * @generated from field: uint64 valset_nonce = 1;
   */
  valsetNonce = protoInt64.zero;

  /**
   * @generated from field: string orchestrator_address = 2;
   */
  orchestratorAddress = "";

  constructor(data?: PartialMessage<EventValsetConfirm>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.peggy.v1.EventValsetConfirm";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "valset_nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "orchestrator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventValsetConfirm {
    return new EventValsetConfirm().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventValsetConfirm {
    return new EventValsetConfirm().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventValsetConfirm {
    return new EventValsetConfirm().fromJsonString(jsonString, options);
  }

  static equals(a: EventValsetConfirm | PlainMessage<EventValsetConfirm> | undefined, b: EventValsetConfirm | PlainMessage<EventValsetConfirm> | undefined): boolean {
    return proto3.util.equals(EventValsetConfirm, a, b);
  }
}

/**
 * @generated from message injective.peggy.v1.EventSendToEth
 */
export class EventSendToEth extends Message<EventSendToEth> {
  /**
   * @generated from field: uint64 outgoing_tx_id = 1;
   */
  outgoingTxId = protoInt64.zero;

  /**
   * @generated from field: string sender = 2;
   */
  sender = "";

  /**
   * @generated from field: string receiver = 3;
   */
  receiver = "";

  /**
   * @generated from field: string amount = 4;
   */
  amount = "";

  /**
   * @generated from field: string bridge_fee = 5;
   */
  bridgeFee = "";

  constructor(data?: PartialMessage<EventSendToEth>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.peggy.v1.EventSendToEth";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "outgoing_tx_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "receiver", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "bridge_fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventSendToEth {
    return new EventSendToEth().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventSendToEth {
    return new EventSendToEth().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventSendToEth {
    return new EventSendToEth().fromJsonString(jsonString, options);
  }

  static equals(a: EventSendToEth | PlainMessage<EventSendToEth> | undefined, b: EventSendToEth | PlainMessage<EventSendToEth> | undefined): boolean {
    return proto3.util.equals(EventSendToEth, a, b);
  }
}

/**
 * @generated from message injective.peggy.v1.EventConfirmBatch
 */
export class EventConfirmBatch extends Message<EventConfirmBatch> {
  /**
   * @generated from field: uint64 batch_nonce = 1;
   */
  batchNonce = protoInt64.zero;

  /**
   * @generated from field: string orchestrator_address = 2;
   */
  orchestratorAddress = "";

  constructor(data?: PartialMessage<EventConfirmBatch>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.peggy.v1.EventConfirmBatch";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "batch_nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "orchestrator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventConfirmBatch {
    return new EventConfirmBatch().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventConfirmBatch {
    return new EventConfirmBatch().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventConfirmBatch {
    return new EventConfirmBatch().fromJsonString(jsonString, options);
  }

  static equals(a: EventConfirmBatch | PlainMessage<EventConfirmBatch> | undefined, b: EventConfirmBatch | PlainMessage<EventConfirmBatch> | undefined): boolean {
    return proto3.util.equals(EventConfirmBatch, a, b);
  }
}

/**
 * @generated from message injective.peggy.v1.EventAttestationVote
 */
export class EventAttestationVote extends Message<EventAttestationVote> {
  /**
   * @generated from field: uint64 event_nonce = 1;
   */
  eventNonce = protoInt64.zero;

  /**
   * @generated from field: bytes attestation_id = 2;
   */
  attestationId = new Uint8Array(0);

  /**
   * @generated from field: string voter = 3;
   */
  voter = "";

  constructor(data?: PartialMessage<EventAttestationVote>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.peggy.v1.EventAttestationVote";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event_nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "attestation_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "voter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventAttestationVote {
    return new EventAttestationVote().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventAttestationVote {
    return new EventAttestationVote().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventAttestationVote {
    return new EventAttestationVote().fromJsonString(jsonString, options);
  }

  static equals(a: EventAttestationVote | PlainMessage<EventAttestationVote> | undefined, b: EventAttestationVote | PlainMessage<EventAttestationVote> | undefined): boolean {
    return proto3.util.equals(EventAttestationVote, a, b);
  }
}

/**
 * @generated from message injective.peggy.v1.EventDepositClaim
 */
export class EventDepositClaim extends Message<EventDepositClaim> {
  /**
   * @generated from field: uint64 event_nonce = 1;
   */
  eventNonce = protoInt64.zero;

  /**
   * @generated from field: uint64 event_height = 2;
   */
  eventHeight = protoInt64.zero;

  /**
   * @generated from field: bytes attestation_id = 3;
   */
  attestationId = new Uint8Array(0);

  /**
   * @generated from field: string ethereum_sender = 4;
   */
  ethereumSender = "";

  /**
   * @generated from field: string cosmos_receiver = 5;
   */
  cosmosReceiver = "";

  /**
   * @generated from field: string token_contract = 6;
   */
  tokenContract = "";

  /**
   * @generated from field: string amount = 7;
   */
  amount = "";

  /**
   * @generated from field: string orchestrator_address = 8;
   */
  orchestratorAddress = "";

  /**
   * @generated from field: string data = 9;
   */
  data = "";

  constructor(data?: PartialMessage<EventDepositClaim>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.peggy.v1.EventDepositClaim";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event_nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "event_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "attestation_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "ethereum_sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "cosmos_receiver", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "token_contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "orchestrator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventDepositClaim {
    return new EventDepositClaim().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventDepositClaim {
    return new EventDepositClaim().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventDepositClaim {
    return new EventDepositClaim().fromJsonString(jsonString, options);
  }

  static equals(a: EventDepositClaim | PlainMessage<EventDepositClaim> | undefined, b: EventDepositClaim | PlainMessage<EventDepositClaim> | undefined): boolean {
    return proto3.util.equals(EventDepositClaim, a, b);
  }
}

/**
 * @generated from message injective.peggy.v1.EventWithdrawClaim
 */
export class EventWithdrawClaim extends Message<EventWithdrawClaim> {
  /**
   * @generated from field: uint64 event_nonce = 1;
   */
  eventNonce = protoInt64.zero;

  /**
   * @generated from field: uint64 event_height = 2;
   */
  eventHeight = protoInt64.zero;

  /**
   * @generated from field: bytes attestation_id = 3;
   */
  attestationId = new Uint8Array(0);

  /**
   * @generated from field: uint64 batch_nonce = 4;
   */
  batchNonce = protoInt64.zero;

  /**
   * @generated from field: string token_contract = 5;
   */
  tokenContract = "";

  /**
   * @generated from field: string orchestrator_address = 6;
   */
  orchestratorAddress = "";

  constructor(data?: PartialMessage<EventWithdrawClaim>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.peggy.v1.EventWithdrawClaim";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event_nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "event_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "attestation_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "batch_nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "token_contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "orchestrator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventWithdrawClaim {
    return new EventWithdrawClaim().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventWithdrawClaim {
    return new EventWithdrawClaim().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventWithdrawClaim {
    return new EventWithdrawClaim().fromJsonString(jsonString, options);
  }

  static equals(a: EventWithdrawClaim | PlainMessage<EventWithdrawClaim> | undefined, b: EventWithdrawClaim | PlainMessage<EventWithdrawClaim> | undefined): boolean {
    return proto3.util.equals(EventWithdrawClaim, a, b);
  }
}

/**
 * @generated from message injective.peggy.v1.EventERC20DeployedClaim
 */
export class EventERC20DeployedClaim extends Message<EventERC20DeployedClaim> {
  /**
   * @generated from field: uint64 event_nonce = 1;
   */
  eventNonce = protoInt64.zero;

  /**
   * @generated from field: uint64 event_height = 2;
   */
  eventHeight = protoInt64.zero;

  /**
   * @generated from field: bytes attestation_id = 3;
   */
  attestationId = new Uint8Array(0);

  /**
   * @generated from field: string cosmos_denom = 4;
   */
  cosmosDenom = "";

  /**
   * @generated from field: string token_contract = 5;
   */
  tokenContract = "";

  /**
   * @generated from field: string name = 6;
   */
  name = "";

  /**
   * @generated from field: string symbol = 7;
   */
  symbol = "";

  /**
   * @generated from field: uint64 decimals = 8;
   */
  decimals = protoInt64.zero;

  /**
   * @generated from field: string orchestrator_address = 9;
   */
  orchestratorAddress = "";

  constructor(data?: PartialMessage<EventERC20DeployedClaim>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.peggy.v1.EventERC20DeployedClaim";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event_nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "event_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "attestation_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "cosmos_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "token_contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "symbol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "decimals", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 9, name: "orchestrator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventERC20DeployedClaim {
    return new EventERC20DeployedClaim().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventERC20DeployedClaim {
    return new EventERC20DeployedClaim().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventERC20DeployedClaim {
    return new EventERC20DeployedClaim().fromJsonString(jsonString, options);
  }

  static equals(a: EventERC20DeployedClaim | PlainMessage<EventERC20DeployedClaim> | undefined, b: EventERC20DeployedClaim | PlainMessage<EventERC20DeployedClaim> | undefined): boolean {
    return proto3.util.equals(EventERC20DeployedClaim, a, b);
  }
}

/**
 * @generated from message injective.peggy.v1.EventValsetUpdateClaim
 */
export class EventValsetUpdateClaim extends Message<EventValsetUpdateClaim> {
  /**
   * @generated from field: uint64 event_nonce = 1;
   */
  eventNonce = protoInt64.zero;

  /**
   * @generated from field: uint64 event_height = 2;
   */
  eventHeight = protoInt64.zero;

  /**
   * @generated from field: bytes attestation_id = 3;
   */
  attestationId = new Uint8Array(0);

  /**
   * @generated from field: uint64 valset_nonce = 4;
   */
  valsetNonce = protoInt64.zero;

  /**
   * @generated from field: repeated injective.peggy.v1.BridgeValidator valset_members = 5;
   */
  valsetMembers: BridgeValidator[] = [];

  /**
   * @generated from field: string reward_amount = 6;
   */
  rewardAmount = "";

  /**
   * @generated from field: string reward_token = 7;
   */
  rewardToken = "";

  /**
   * @generated from field: string orchestrator_address = 8;
   */
  orchestratorAddress = "";

  constructor(data?: PartialMessage<EventValsetUpdateClaim>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.peggy.v1.EventValsetUpdateClaim";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event_nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "event_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "attestation_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "valset_nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "valset_members", kind: "message", T: BridgeValidator, repeated: true },
    { no: 6, name: "reward_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "reward_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "orchestrator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventValsetUpdateClaim {
    return new EventValsetUpdateClaim().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventValsetUpdateClaim {
    return new EventValsetUpdateClaim().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventValsetUpdateClaim {
    return new EventValsetUpdateClaim().fromJsonString(jsonString, options);
  }

  static equals(a: EventValsetUpdateClaim | PlainMessage<EventValsetUpdateClaim> | undefined, b: EventValsetUpdateClaim | PlainMessage<EventValsetUpdateClaim> | undefined): boolean {
    return proto3.util.equals(EventValsetUpdateClaim, a, b);
  }
}

/**
 * @generated from message injective.peggy.v1.EventCancelSendToEth
 */
export class EventCancelSendToEth extends Message<EventCancelSendToEth> {
  /**
   * @generated from field: uint64 outgoing_tx_id = 1;
   */
  outgoingTxId = protoInt64.zero;

  constructor(data?: PartialMessage<EventCancelSendToEth>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.peggy.v1.EventCancelSendToEth";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "outgoing_tx_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventCancelSendToEth {
    return new EventCancelSendToEth().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventCancelSendToEth {
    return new EventCancelSendToEth().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventCancelSendToEth {
    return new EventCancelSendToEth().fromJsonString(jsonString, options);
  }

  static equals(a: EventCancelSendToEth | PlainMessage<EventCancelSendToEth> | undefined, b: EventCancelSendToEth | PlainMessage<EventCancelSendToEth> | undefined): boolean {
    return proto3.util.equals(EventCancelSendToEth, a, b);
  }
}

/**
 * @generated from message injective.peggy.v1.EventSubmitBadSignatureEvidence
 */
export class EventSubmitBadSignatureEvidence extends Message<EventSubmitBadSignatureEvidence> {
  /**
   * @generated from field: string bad_eth_signature = 1;
   */
  badEthSignature = "";

  /**
   * @generated from field: string bad_eth_signature_subject = 2;
   */
  badEthSignatureSubject = "";

  constructor(data?: PartialMessage<EventSubmitBadSignatureEvidence>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.peggy.v1.EventSubmitBadSignatureEvidence";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bad_eth_signature", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "bad_eth_signature_subject", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventSubmitBadSignatureEvidence {
    return new EventSubmitBadSignatureEvidence().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventSubmitBadSignatureEvidence {
    return new EventSubmitBadSignatureEvidence().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventSubmitBadSignatureEvidence {
    return new EventSubmitBadSignatureEvidence().fromJsonString(jsonString, options);
  }

  static equals(a: EventSubmitBadSignatureEvidence | PlainMessage<EventSubmitBadSignatureEvidence> | undefined, b: EventSubmitBadSignatureEvidence | PlainMessage<EventSubmitBadSignatureEvidence> | undefined): boolean {
    return proto3.util.equals(EventSubmitBadSignatureEvidence, a, b);
  }
}

/**
 * @generated from message injective.peggy.v1.EventValidatorSlash
 */
export class EventValidatorSlash extends Message<EventValidatorSlash> {
  /**
   * @generated from field: int64 power = 1;
   */
  power = protoInt64.zero;

  /**
   * @generated from field: string reason = 2;
   */
  reason = "";

  /**
   * @generated from field: string consensus_address = 3;
   */
  consensusAddress = "";

  /**
   * @generated from field: string operator_address = 4;
   */
  operatorAddress = "";

  /**
   * @generated from field: string moniker = 5;
   */
  moniker = "";

  constructor(data?: PartialMessage<EventValidatorSlash>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.peggy.v1.EventValidatorSlash";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "power", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "consensus_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "operator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "moniker", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventValidatorSlash {
    return new EventValidatorSlash().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventValidatorSlash {
    return new EventValidatorSlash().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventValidatorSlash {
    return new EventValidatorSlash().fromJsonString(jsonString, options);
  }

  static equals(a: EventValidatorSlash | PlainMessage<EventValidatorSlash> | undefined, b: EventValidatorSlash | PlainMessage<EventValidatorSlash> | undefined): boolean {
    return proto3.util.equals(EventValidatorSlash, a, b);
  }
}

