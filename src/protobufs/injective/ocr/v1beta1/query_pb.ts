// @generated by protoc-gen-es v1.7.0 with parameter "target=ts"
// @generated from file injective/ocr/v1beta1/query.proto (package injective.ocr.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { EpochAndRound, FeedConfig, FeedConfigInfo, Params, Transmission } from "./ocr_pb.js";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";
import { GenesisState } from "./genesis_pb.js";

/**
 * @generated from message injective.ocr.v1beta1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.ocr.v1beta1.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * @generated from message injective.ocr.v1beta1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * @generated from field: injective.ocr.v1beta1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.ocr.v1beta1.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * @generated from message injective.ocr.v1beta1.QueryFeedConfigRequest
 */
export class QueryFeedConfigRequest extends Message<QueryFeedConfigRequest> {
  /**
   * @generated from field: string feed_id = 1;
   */
  feedId = "";

  constructor(data?: PartialMessage<QueryFeedConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.ocr.v1beta1.QueryFeedConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "feed_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryFeedConfigRequest {
    return new QueryFeedConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryFeedConfigRequest {
    return new QueryFeedConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryFeedConfigRequest {
    return new QueryFeedConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryFeedConfigRequest | PlainMessage<QueryFeedConfigRequest> | undefined, b: QueryFeedConfigRequest | PlainMessage<QueryFeedConfigRequest> | undefined): boolean {
    return proto3.util.equals(QueryFeedConfigRequest, a, b);
  }
}

/**
 * @generated from message injective.ocr.v1beta1.QueryFeedConfigResponse
 */
export class QueryFeedConfigResponse extends Message<QueryFeedConfigResponse> {
  /**
   * @generated from field: injective.ocr.v1beta1.FeedConfigInfo feed_config_info = 1;
   */
  feedConfigInfo?: FeedConfigInfo;

  /**
   * @generated from field: injective.ocr.v1beta1.FeedConfig feed_config = 2;
   */
  feedConfig?: FeedConfig;

  constructor(data?: PartialMessage<QueryFeedConfigResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.ocr.v1beta1.QueryFeedConfigResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "feed_config_info", kind: "message", T: FeedConfigInfo },
    { no: 2, name: "feed_config", kind: "message", T: FeedConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryFeedConfigResponse {
    return new QueryFeedConfigResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryFeedConfigResponse {
    return new QueryFeedConfigResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryFeedConfigResponse {
    return new QueryFeedConfigResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryFeedConfigResponse | PlainMessage<QueryFeedConfigResponse> | undefined, b: QueryFeedConfigResponse | PlainMessage<QueryFeedConfigResponse> | undefined): boolean {
    return proto3.util.equals(QueryFeedConfigResponse, a, b);
  }
}

/**
 * @generated from message injective.ocr.v1beta1.QueryFeedConfigInfoRequest
 */
export class QueryFeedConfigInfoRequest extends Message<QueryFeedConfigInfoRequest> {
  /**
   * @generated from field: string feed_id = 1;
   */
  feedId = "";

  constructor(data?: PartialMessage<QueryFeedConfigInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.ocr.v1beta1.QueryFeedConfigInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "feed_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryFeedConfigInfoRequest {
    return new QueryFeedConfigInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryFeedConfigInfoRequest {
    return new QueryFeedConfigInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryFeedConfigInfoRequest {
    return new QueryFeedConfigInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryFeedConfigInfoRequest | PlainMessage<QueryFeedConfigInfoRequest> | undefined, b: QueryFeedConfigInfoRequest | PlainMessage<QueryFeedConfigInfoRequest> | undefined): boolean {
    return proto3.util.equals(QueryFeedConfigInfoRequest, a, b);
  }
}

/**
 * @generated from message injective.ocr.v1beta1.QueryFeedConfigInfoResponse
 */
export class QueryFeedConfigInfoResponse extends Message<QueryFeedConfigInfoResponse> {
  /**
   * @generated from field: injective.ocr.v1beta1.FeedConfigInfo feed_config_info = 1;
   */
  feedConfigInfo?: FeedConfigInfo;

  /**
   * @generated from field: injective.ocr.v1beta1.EpochAndRound epoch_and_round = 2;
   */
  epochAndRound?: EpochAndRound;

  constructor(data?: PartialMessage<QueryFeedConfigInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.ocr.v1beta1.QueryFeedConfigInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "feed_config_info", kind: "message", T: FeedConfigInfo },
    { no: 2, name: "epoch_and_round", kind: "message", T: EpochAndRound },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryFeedConfigInfoResponse {
    return new QueryFeedConfigInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryFeedConfigInfoResponse {
    return new QueryFeedConfigInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryFeedConfigInfoResponse {
    return new QueryFeedConfigInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryFeedConfigInfoResponse | PlainMessage<QueryFeedConfigInfoResponse> | undefined, b: QueryFeedConfigInfoResponse | PlainMessage<QueryFeedConfigInfoResponse> | undefined): boolean {
    return proto3.util.equals(QueryFeedConfigInfoResponse, a, b);
  }
}

/**
 * @generated from message injective.ocr.v1beta1.QueryLatestRoundRequest
 */
export class QueryLatestRoundRequest extends Message<QueryLatestRoundRequest> {
  /**
   * @generated from field: string feed_id = 1;
   */
  feedId = "";

  constructor(data?: PartialMessage<QueryLatestRoundRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.ocr.v1beta1.QueryLatestRoundRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "feed_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryLatestRoundRequest {
    return new QueryLatestRoundRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryLatestRoundRequest {
    return new QueryLatestRoundRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryLatestRoundRequest {
    return new QueryLatestRoundRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryLatestRoundRequest | PlainMessage<QueryLatestRoundRequest> | undefined, b: QueryLatestRoundRequest | PlainMessage<QueryLatestRoundRequest> | undefined): boolean {
    return proto3.util.equals(QueryLatestRoundRequest, a, b);
  }
}

/**
 * @generated from message injective.ocr.v1beta1.QueryLatestRoundResponse
 */
export class QueryLatestRoundResponse extends Message<QueryLatestRoundResponse> {
  /**
   * @generated from field: uint64 latest_round_id = 1;
   */
  latestRoundId = protoInt64.zero;

  /**
   * @generated from field: injective.ocr.v1beta1.Transmission data = 2;
   */
  data?: Transmission;

  constructor(data?: PartialMessage<QueryLatestRoundResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.ocr.v1beta1.QueryLatestRoundResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "latest_round_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "data", kind: "message", T: Transmission },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryLatestRoundResponse {
    return new QueryLatestRoundResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryLatestRoundResponse {
    return new QueryLatestRoundResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryLatestRoundResponse {
    return new QueryLatestRoundResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryLatestRoundResponse | PlainMessage<QueryLatestRoundResponse> | undefined, b: QueryLatestRoundResponse | PlainMessage<QueryLatestRoundResponse> | undefined): boolean {
    return proto3.util.equals(QueryLatestRoundResponse, a, b);
  }
}

/**
 * @generated from message injective.ocr.v1beta1.QueryLatestTransmissionDetailsRequest
 */
export class QueryLatestTransmissionDetailsRequest extends Message<QueryLatestTransmissionDetailsRequest> {
  /**
   * @generated from field: string feed_id = 1;
   */
  feedId = "";

  constructor(data?: PartialMessage<QueryLatestTransmissionDetailsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.ocr.v1beta1.QueryLatestTransmissionDetailsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "feed_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryLatestTransmissionDetailsRequest {
    return new QueryLatestTransmissionDetailsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryLatestTransmissionDetailsRequest {
    return new QueryLatestTransmissionDetailsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryLatestTransmissionDetailsRequest {
    return new QueryLatestTransmissionDetailsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryLatestTransmissionDetailsRequest | PlainMessage<QueryLatestTransmissionDetailsRequest> | undefined, b: QueryLatestTransmissionDetailsRequest | PlainMessage<QueryLatestTransmissionDetailsRequest> | undefined): boolean {
    return proto3.util.equals(QueryLatestTransmissionDetailsRequest, a, b);
  }
}

/**
 * @generated from message injective.ocr.v1beta1.QueryLatestTransmissionDetailsResponse
 */
export class QueryLatestTransmissionDetailsResponse extends Message<QueryLatestTransmissionDetailsResponse> {
  /**
   * @generated from field: bytes config_digest = 1;
   */
  configDigest = new Uint8Array(0);

  /**
   * @generated from field: injective.ocr.v1beta1.EpochAndRound epoch_and_round = 2;
   */
  epochAndRound?: EpochAndRound;

  /**
   * @generated from field: injective.ocr.v1beta1.Transmission data = 3;
   */
  data?: Transmission;

  constructor(data?: PartialMessage<QueryLatestTransmissionDetailsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.ocr.v1beta1.QueryLatestTransmissionDetailsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "config_digest", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "epoch_and_round", kind: "message", T: EpochAndRound },
    { no: 3, name: "data", kind: "message", T: Transmission },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryLatestTransmissionDetailsResponse {
    return new QueryLatestTransmissionDetailsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryLatestTransmissionDetailsResponse {
    return new QueryLatestTransmissionDetailsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryLatestTransmissionDetailsResponse {
    return new QueryLatestTransmissionDetailsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryLatestTransmissionDetailsResponse | PlainMessage<QueryLatestTransmissionDetailsResponse> | undefined, b: QueryLatestTransmissionDetailsResponse | PlainMessage<QueryLatestTransmissionDetailsResponse> | undefined): boolean {
    return proto3.util.equals(QueryLatestTransmissionDetailsResponse, a, b);
  }
}

/**
 * @generated from message injective.ocr.v1beta1.QueryOwedAmountRequest
 */
export class QueryOwedAmountRequest extends Message<QueryOwedAmountRequest> {
  /**
   * @generated from field: string transmitter = 1;
   */
  transmitter = "";

  constructor(data?: PartialMessage<QueryOwedAmountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.ocr.v1beta1.QueryOwedAmountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transmitter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryOwedAmountRequest {
    return new QueryOwedAmountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryOwedAmountRequest {
    return new QueryOwedAmountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryOwedAmountRequest {
    return new QueryOwedAmountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryOwedAmountRequest | PlainMessage<QueryOwedAmountRequest> | undefined, b: QueryOwedAmountRequest | PlainMessage<QueryOwedAmountRequest> | undefined): boolean {
    return proto3.util.equals(QueryOwedAmountRequest, a, b);
  }
}

/**
 * @generated from message injective.ocr.v1beta1.QueryOwedAmountResponse
 */
export class QueryOwedAmountResponse extends Message<QueryOwedAmountResponse> {
  /**
   * @generated from field: cosmos.base.v1beta1.Coin amount = 1;
   */
  amount?: Coin;

  constructor(data?: PartialMessage<QueryOwedAmountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.ocr.v1beta1.QueryOwedAmountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryOwedAmountResponse {
    return new QueryOwedAmountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryOwedAmountResponse {
    return new QueryOwedAmountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryOwedAmountResponse {
    return new QueryOwedAmountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryOwedAmountResponse | PlainMessage<QueryOwedAmountResponse> | undefined, b: QueryOwedAmountResponse | PlainMessage<QueryOwedAmountResponse> | undefined): boolean {
    return proto3.util.equals(QueryOwedAmountResponse, a, b);
  }
}

/**
 * @generated from message injective.ocr.v1beta1.QueryModuleStateRequest
 */
export class QueryModuleStateRequest extends Message<QueryModuleStateRequest> {
  constructor(data?: PartialMessage<QueryModuleStateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.ocr.v1beta1.QueryModuleStateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryModuleStateRequest {
    return new QueryModuleStateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryModuleStateRequest {
    return new QueryModuleStateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryModuleStateRequest {
    return new QueryModuleStateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryModuleStateRequest | PlainMessage<QueryModuleStateRequest> | undefined, b: QueryModuleStateRequest | PlainMessage<QueryModuleStateRequest> | undefined): boolean {
    return proto3.util.equals(QueryModuleStateRequest, a, b);
  }
}

/**
 * @generated from message injective.ocr.v1beta1.QueryModuleStateResponse
 */
export class QueryModuleStateResponse extends Message<QueryModuleStateResponse> {
  /**
   * @generated from field: injective.ocr.v1beta1.GenesisState state = 1;
   */
  state?: GenesisState;

  constructor(data?: PartialMessage<QueryModuleStateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.ocr.v1beta1.QueryModuleStateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state", kind: "message", T: GenesisState },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryModuleStateResponse {
    return new QueryModuleStateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryModuleStateResponse {
    return new QueryModuleStateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryModuleStateResponse {
    return new QueryModuleStateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryModuleStateResponse | PlainMessage<QueryModuleStateResponse> | undefined, b: QueryModuleStateResponse | PlainMessage<QueryModuleStateResponse> | undefined): boolean {
    return proto3.util.equals(QueryModuleStateResponse, a, b);
  }
}

