// @generated by protoc-gen-es v1.7.0 with parameter "target=ts"
// @generated from file opinit/ophost/v1/genesis.proto (package opinit.ophost.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { BridgeConfig, Output, Params, TokenPair } from "./types_pb.js";

/**
 * GenesisState defines the rollup module's genesis state.
 *
 * @generated from message opinit.ophost.v1.GenesisState
 */
export class GenesisState extends Message<GenesisState> {
  /**
   * params defines all the parameters of related to deposit.
   *
   * @generated from field: opinit.ophost.v1.Params params = 1;
   */
  params?: Params;

  /**
   * bridges defines the registered bridges.
   *
   * @generated from field: repeated opinit.ophost.v1.Bridge bridges = 2;
   */
  bridges: Bridge[] = [];

  /**
   * the id will be asisgned to a new bridge.
   *
   * @generated from field: uint64 next_bridge_id = 3;
   */
  nextBridgeId = protoInt64.zero;

  constructor(data?: PartialMessage<GenesisState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "opinit.ophost.v1.GenesisState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
    { no: 2, name: "bridges", kind: "message", T: Bridge, repeated: true },
    { no: 3, name: "next_bridge_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisState {
    return new GenesisState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisState | PlainMessage<GenesisState> | undefined, b: GenesisState | PlainMessage<GenesisState> | undefined): boolean {
    return proto3.util.equals(GenesisState, a, b);
  }
}

/**
 * Bridge defeins a bridge state.
 *
 * @generated from message opinit.ophost.v1.Bridge
 */
export class Bridge extends Message<Bridge> {
  /**
   * @generated from field: uint64 bridge_id = 1;
   */
  bridgeId = protoInt64.zero;

  /**
   * l1 sequence number.
   *
   * @generated from field: uint64 next_l1_sequence = 2;
   */
  nextL1Sequence = protoInt64.zero;

  /**
   * next output index.
   *
   * @generated from field: uint64 next_output_index = 3;
   */
  nextOutputIndex = protoInt64.zero;

  /**
   * a bridge config.
   *
   * @generated from field: opinit.ophost.v1.BridgeConfig bridge_config = 4;
   */
  bridgeConfig?: BridgeConfig;

  /**
   * a list of (l1, l2) token pairs
   *
   * @generated from field: repeated opinit.ophost.v1.TokenPair token_pairs = 5;
   */
  tokenPairs: TokenPair[] = [];

  /**
   * a list of l2 output proposals, which has been proven.
   *
   * @generated from field: repeated bytes proven_withdrawals = 6;
   */
  provenWithdrawals: Uint8Array[] = [];

  /**
   * a list of l2 output proposals.
   *
   * @generated from field: repeated opinit.ophost.v1.WrappedOutput proposals = 7;
   */
  proposals: WrappedOutput[] = [];

  constructor(data?: PartialMessage<Bridge>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "opinit.ophost.v1.Bridge";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bridge_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "next_l1_sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "next_output_index", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "bridge_config", kind: "message", T: BridgeConfig },
    { no: 5, name: "token_pairs", kind: "message", T: TokenPair, repeated: true },
    { no: 6, name: "proven_withdrawals", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
    { no: 7, name: "proposals", kind: "message", T: WrappedOutput, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Bridge {
    return new Bridge().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Bridge {
    return new Bridge().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Bridge {
    return new Bridge().fromJsonString(jsonString, options);
  }

  static equals(a: Bridge | PlainMessage<Bridge> | undefined, b: Bridge | PlainMessage<Bridge> | undefined): boolean {
    return proto3.util.equals(Bridge, a, b);
  }
}

/**
 * @generated from message opinit.ophost.v1.WrappedOutput
 */
export class WrappedOutput extends Message<WrappedOutput> {
  /**
   * @generated from field: uint64 output_index = 1;
   */
  outputIndex = protoInt64.zero;

  /**
   * @generated from field: opinit.ophost.v1.Output output_proposal = 2;
   */
  outputProposal?: Output;

  constructor(data?: PartialMessage<WrappedOutput>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "opinit.ophost.v1.WrappedOutput";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "output_index", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "output_proposal", kind: "message", T: Output },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WrappedOutput {
    return new WrappedOutput().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WrappedOutput {
    return new WrappedOutput().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WrappedOutput {
    return new WrappedOutput().fromJsonString(jsonString, options);
  }

  static equals(a: WrappedOutput | PlainMessage<WrappedOutput> | undefined, b: WrappedOutput | PlainMessage<WrappedOutput> | undefined): boolean {
    return proto3.util.equals(WrappedOutput, a, b);
  }
}

