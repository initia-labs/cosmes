// @generated by protoc-gen-es v1.7.0 with parameter "target=ts"
// @generated from file opinit/ophost/v1/query.proto (package opinit.ophost.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { BridgeConfig, Output, Params, TokenPair } from "./types_pb.js";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination_pb.js";

/**
 * QueryBridgeRequest is request type for Query/Bridge RPC method.
 *
 * @generated from message opinit.ophost.v1.QueryBridgeRequest
 */
export class QueryBridgeRequest extends Message<QueryBridgeRequest> {
  /**
   * @generated from field: uint64 bridge_id = 1;
   */
  bridgeId = protoInt64.zero;

  constructor(data?: PartialMessage<QueryBridgeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "opinit.ophost.v1.QueryBridgeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bridge_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBridgeRequest {
    return new QueryBridgeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBridgeRequest {
    return new QueryBridgeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBridgeRequest {
    return new QueryBridgeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBridgeRequest | PlainMessage<QueryBridgeRequest> | undefined, b: QueryBridgeRequest | PlainMessage<QueryBridgeRequest> | undefined): boolean {
    return proto3.util.equals(QueryBridgeRequest, a, b);
  }
}

/**
 * QueryBridgeResponse is response type for the Query/Bridge RPC method
 *
 * @generated from message opinit.ophost.v1.QueryBridgeResponse
 */
export class QueryBridgeResponse extends Message<QueryBridgeResponse> {
  /**
   * @generated from field: uint64 bridge_id = 1;
   */
  bridgeId = protoInt64.zero;

  /**
   * @generated from field: string bridge_addr = 2;
   */
  bridgeAddr = "";

  /**
   * @generated from field: opinit.ophost.v1.BridgeConfig bridge_config = 3;
   */
  bridgeConfig?: BridgeConfig;

  constructor(data?: PartialMessage<QueryBridgeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "opinit.ophost.v1.QueryBridgeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bridge_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "bridge_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "bridge_config", kind: "message", T: BridgeConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBridgeResponse {
    return new QueryBridgeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBridgeResponse {
    return new QueryBridgeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBridgeResponse {
    return new QueryBridgeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBridgeResponse | PlainMessage<QueryBridgeResponse> | undefined, b: QueryBridgeResponse | PlainMessage<QueryBridgeResponse> | undefined): boolean {
    return proto3.util.equals(QueryBridgeResponse, a, b);
  }
}

/**
 * QueryBridgesRequest is request type for Query/Bridges RPC method.
 *
 * @generated from message opinit.ophost.v1.QueryBridgesRequest
 */
export class QueryBridgesRequest extends Message<QueryBridgesRequest> {
  /**
   * pagination defines the pagination in the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryBridgesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "opinit.ophost.v1.QueryBridgesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBridgesRequest {
    return new QueryBridgesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBridgesRequest {
    return new QueryBridgesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBridgesRequest {
    return new QueryBridgesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBridgesRequest | PlainMessage<QueryBridgesRequest> | undefined, b: QueryBridgesRequest | PlainMessage<QueryBridgesRequest> | undefined): boolean {
    return proto3.util.equals(QueryBridgesRequest, a, b);
  }
}

/**
 * QueryBridgesResponse is response type for the Query/Bridges RPC method
 *
 * @generated from message opinit.ophost.v1.QueryBridgesResponse
 */
export class QueryBridgesResponse extends Message<QueryBridgesResponse> {
  /**
   * @generated from field: repeated opinit.ophost.v1.QueryBridgeResponse bridges = 1;
   */
  bridges: QueryBridgeResponse[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryBridgesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "opinit.ophost.v1.QueryBridgesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bridges", kind: "message", T: QueryBridgeResponse, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBridgesResponse {
    return new QueryBridgesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBridgesResponse {
    return new QueryBridgesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBridgesResponse {
    return new QueryBridgesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBridgesResponse | PlainMessage<QueryBridgesResponse> | undefined, b: QueryBridgesResponse | PlainMessage<QueryBridgesResponse> | undefined): boolean {
    return proto3.util.equals(QueryBridgesResponse, a, b);
  }
}

/**
 * QueryTokenPairByL1DenomRequest is response type for the Query/TokenPairByL1Denom RPC method
 *
 * @generated from message opinit.ophost.v1.QueryTokenPairByL1DenomRequest
 */
export class QueryTokenPairByL1DenomRequest extends Message<QueryTokenPairByL1DenomRequest> {
  /**
   * @generated from field: uint64 bridge_id = 1;
   */
  bridgeId = protoInt64.zero;

  /**
   * @generated from field: string l1_denom = 2;
   */
  l1Denom = "";

  constructor(data?: PartialMessage<QueryTokenPairByL1DenomRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "opinit.ophost.v1.QueryTokenPairByL1DenomRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bridge_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "l1_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTokenPairByL1DenomRequest {
    return new QueryTokenPairByL1DenomRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTokenPairByL1DenomRequest {
    return new QueryTokenPairByL1DenomRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTokenPairByL1DenomRequest {
    return new QueryTokenPairByL1DenomRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTokenPairByL1DenomRequest | PlainMessage<QueryTokenPairByL1DenomRequest> | undefined, b: QueryTokenPairByL1DenomRequest | PlainMessage<QueryTokenPairByL1DenomRequest> | undefined): boolean {
    return proto3.util.equals(QueryTokenPairByL1DenomRequest, a, b);
  }
}

/**
 * QueryTokenPairByL1DenomResponse is response type for the Query/TokenPairByL1Denom RPC method
 *
 * @generated from message opinit.ophost.v1.QueryTokenPairByL1DenomResponse
 */
export class QueryTokenPairByL1DenomResponse extends Message<QueryTokenPairByL1DenomResponse> {
  /**
   * @generated from field: opinit.ophost.v1.TokenPair token_pair = 1;
   */
  tokenPair?: TokenPair;

  constructor(data?: PartialMessage<QueryTokenPairByL1DenomResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "opinit.ophost.v1.QueryTokenPairByL1DenomResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token_pair", kind: "message", T: TokenPair },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTokenPairByL1DenomResponse {
    return new QueryTokenPairByL1DenomResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTokenPairByL1DenomResponse {
    return new QueryTokenPairByL1DenomResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTokenPairByL1DenomResponse {
    return new QueryTokenPairByL1DenomResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTokenPairByL1DenomResponse | PlainMessage<QueryTokenPairByL1DenomResponse> | undefined, b: QueryTokenPairByL1DenomResponse | PlainMessage<QueryTokenPairByL1DenomResponse> | undefined): boolean {
    return proto3.util.equals(QueryTokenPairByL1DenomResponse, a, b);
  }
}

/**
 * QueryTokenPairByL2DenomRequest is response type for the Query/TokenPairByL2Denom RPC method
 *
 * @generated from message opinit.ophost.v1.QueryTokenPairByL2DenomRequest
 */
export class QueryTokenPairByL2DenomRequest extends Message<QueryTokenPairByL2DenomRequest> {
  /**
   * @generated from field: uint64 bridge_id = 1;
   */
  bridgeId = protoInt64.zero;

  /**
   * @generated from field: string l2_denom = 2;
   */
  l2Denom = "";

  constructor(data?: PartialMessage<QueryTokenPairByL2DenomRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "opinit.ophost.v1.QueryTokenPairByL2DenomRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bridge_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "l2_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTokenPairByL2DenomRequest {
    return new QueryTokenPairByL2DenomRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTokenPairByL2DenomRequest {
    return new QueryTokenPairByL2DenomRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTokenPairByL2DenomRequest {
    return new QueryTokenPairByL2DenomRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTokenPairByL2DenomRequest | PlainMessage<QueryTokenPairByL2DenomRequest> | undefined, b: QueryTokenPairByL2DenomRequest | PlainMessage<QueryTokenPairByL2DenomRequest> | undefined): boolean {
    return proto3.util.equals(QueryTokenPairByL2DenomRequest, a, b);
  }
}

/**
 * QueryTokenPairByL2DenomResponse is response type for the Query/TokenPairByL2Denom RPC method
 *
 * @generated from message opinit.ophost.v1.QueryTokenPairByL2DenomResponse
 */
export class QueryTokenPairByL2DenomResponse extends Message<QueryTokenPairByL2DenomResponse> {
  /**
   * @generated from field: opinit.ophost.v1.TokenPair token_pair = 1;
   */
  tokenPair?: TokenPair;

  constructor(data?: PartialMessage<QueryTokenPairByL2DenomResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "opinit.ophost.v1.QueryTokenPairByL2DenomResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token_pair", kind: "message", T: TokenPair },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTokenPairByL2DenomResponse {
    return new QueryTokenPairByL2DenomResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTokenPairByL2DenomResponse {
    return new QueryTokenPairByL2DenomResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTokenPairByL2DenomResponse {
    return new QueryTokenPairByL2DenomResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTokenPairByL2DenomResponse | PlainMessage<QueryTokenPairByL2DenomResponse> | undefined, b: QueryTokenPairByL2DenomResponse | PlainMessage<QueryTokenPairByL2DenomResponse> | undefined): boolean {
    return proto3.util.equals(QueryTokenPairByL2DenomResponse, a, b);
  }
}

/**
 * QueryTokenPairsRequest is response type for the Query/TokenPairs RPC method
 *
 * @generated from message opinit.ophost.v1.QueryTokenPairsRequest
 */
export class QueryTokenPairsRequest extends Message<QueryTokenPairsRequest> {
  /**
   * @generated from field: uint64 bridge_id = 1;
   */
  bridgeId = protoInt64.zero;

  /**
   * pagination defines the pagination in the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryTokenPairsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "opinit.ophost.v1.QueryTokenPairsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bridge_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTokenPairsRequest {
    return new QueryTokenPairsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTokenPairsRequest {
    return new QueryTokenPairsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTokenPairsRequest {
    return new QueryTokenPairsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTokenPairsRequest | PlainMessage<QueryTokenPairsRequest> | undefined, b: QueryTokenPairsRequest | PlainMessage<QueryTokenPairsRequest> | undefined): boolean {
    return proto3.util.equals(QueryTokenPairsRequest, a, b);
  }
}

/**
 * QueryTokenPairsResponse is response type for the Query/TokenPairs RPC method
 *
 * @generated from message opinit.ophost.v1.QueryTokenPairsResponse
 */
export class QueryTokenPairsResponse extends Message<QueryTokenPairsResponse> {
  /**
   * @generated from field: repeated opinit.ophost.v1.TokenPair token_pairs = 1;
   */
  tokenPairs: TokenPair[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryTokenPairsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "opinit.ophost.v1.QueryTokenPairsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token_pairs", kind: "message", T: TokenPair, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTokenPairsResponse {
    return new QueryTokenPairsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTokenPairsResponse {
    return new QueryTokenPairsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTokenPairsResponse {
    return new QueryTokenPairsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTokenPairsResponse | PlainMessage<QueryTokenPairsResponse> | undefined, b: QueryTokenPairsResponse | PlainMessage<QueryTokenPairsResponse> | undefined): boolean {
    return proto3.util.equals(QueryTokenPairsResponse, a, b);
  }
}

/**
 * QueryOutputProposalRequest is response type for the Query/OutputProposal RPC method
 *
 * @generated from message opinit.ophost.v1.QueryOutputProposalRequest
 */
export class QueryOutputProposalRequest extends Message<QueryOutputProposalRequest> {
  /**
   * @generated from field: uint64 bridge_id = 1;
   */
  bridgeId = protoInt64.zero;

  /**
   * @generated from field: uint64 output_index = 2;
   */
  outputIndex = protoInt64.zero;

  constructor(data?: PartialMessage<QueryOutputProposalRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "opinit.ophost.v1.QueryOutputProposalRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bridge_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "output_index", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryOutputProposalRequest {
    return new QueryOutputProposalRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryOutputProposalRequest {
    return new QueryOutputProposalRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryOutputProposalRequest {
    return new QueryOutputProposalRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryOutputProposalRequest | PlainMessage<QueryOutputProposalRequest> | undefined, b: QueryOutputProposalRequest | PlainMessage<QueryOutputProposalRequest> | undefined): boolean {
    return proto3.util.equals(QueryOutputProposalRequest, a, b);
  }
}

/**
 * QueryOutputProposalResponse is response type for the Query/OutputProposal RPC method
 *
 * @generated from message opinit.ophost.v1.QueryOutputProposalResponse
 */
export class QueryOutputProposalResponse extends Message<QueryOutputProposalResponse> {
  /**
   * @generated from field: uint64 bridge_id = 1;
   */
  bridgeId = protoInt64.zero;

  /**
   * @generated from field: uint64 output_index = 2;
   */
  outputIndex = protoInt64.zero;

  /**
   * @generated from field: opinit.ophost.v1.Output output_proposal = 3;
   */
  outputProposal?: Output;

  constructor(data?: PartialMessage<QueryOutputProposalResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "opinit.ophost.v1.QueryOutputProposalResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bridge_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "output_index", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "output_proposal", kind: "message", T: Output },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryOutputProposalResponse {
    return new QueryOutputProposalResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryOutputProposalResponse {
    return new QueryOutputProposalResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryOutputProposalResponse {
    return new QueryOutputProposalResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryOutputProposalResponse | PlainMessage<QueryOutputProposalResponse> | undefined, b: QueryOutputProposalResponse | PlainMessage<QueryOutputProposalResponse> | undefined): boolean {
    return proto3.util.equals(QueryOutputProposalResponse, a, b);
  }
}

/**
 * QueryOutputProposalsRequest is response type for the Query/OutputProposals RPC method
 *
 * @generated from message opinit.ophost.v1.QueryOutputProposalsRequest
 */
export class QueryOutputProposalsRequest extends Message<QueryOutputProposalsRequest> {
  /**
   * @generated from field: uint64 bridge_id = 1;
   */
  bridgeId = protoInt64.zero;

  /**
   * @generated from field: uint64 output_index = 2;
   */
  outputIndex = protoInt64.zero;

  /**
   * pagination defines the pagination in the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 3;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryOutputProposalsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "opinit.ophost.v1.QueryOutputProposalsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bridge_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "output_index", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryOutputProposalsRequest {
    return new QueryOutputProposalsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryOutputProposalsRequest {
    return new QueryOutputProposalsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryOutputProposalsRequest {
    return new QueryOutputProposalsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryOutputProposalsRequest | PlainMessage<QueryOutputProposalsRequest> | undefined, b: QueryOutputProposalsRequest | PlainMessage<QueryOutputProposalsRequest> | undefined): boolean {
    return proto3.util.equals(QueryOutputProposalsRequest, a, b);
  }
}

/**
 * QueryOutputProposalsResponse is response type for the Query/OutputProposals RPC method
 *
 * @generated from message opinit.ophost.v1.QueryOutputProposalsResponse
 */
export class QueryOutputProposalsResponse extends Message<QueryOutputProposalsResponse> {
  /**
   * @generated from field: repeated opinit.ophost.v1.QueryOutputProposalResponse output_proposals = 1;
   */
  outputProposals: QueryOutputProposalResponse[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryOutputProposalsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "opinit.ophost.v1.QueryOutputProposalsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "output_proposals", kind: "message", T: QueryOutputProposalResponse, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryOutputProposalsResponse {
    return new QueryOutputProposalsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryOutputProposalsResponse {
    return new QueryOutputProposalsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryOutputProposalsResponse {
    return new QueryOutputProposalsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryOutputProposalsResponse | PlainMessage<QueryOutputProposalsResponse> | undefined, b: QueryOutputProposalsResponse | PlainMessage<QueryOutputProposalsResponse> | undefined): boolean {
    return proto3.util.equals(QueryOutputProposalsResponse, a, b);
  }
}

/**
 * QueryParamsRequest is request type for the Query/Params RPC method.
 *
 * @generated from message opinit.ophost.v1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "opinit.ophost.v1.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 *
 * @generated from message opinit.ophost.v1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params holds all the parameters of this module.
   *
   * @generated from field: opinit.ophost.v1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "opinit.ophost.v1.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

