// @generated by protoc-gen-es v1.7.0 with parameter "target=ts"
// @generated from file opinit/ophost/v1/types.proto (package opinit.ophost.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * Params defines the set of ophost parameters.
 *
 * @generated from message opinit.ophost.v1.Params
 */
export class Params extends Message<Params> {
  /**
   * The amount to be paid by l2 creator.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin registration_fee = 1;
   */
  registrationFee: Coin[] = [];

  constructor(data?: PartialMessage<Params>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "opinit.ophost.v1.Params";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "registration_fee", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Params {
    return new Params().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJsonString(jsonString, options);
  }

  static equals(a: Params | PlainMessage<Params> | undefined, b: Params | PlainMessage<Params> | undefined): boolean {
    return proto3.util.equals(Params, a, b);
  }
}

/**
 * BridgeConfig defines the set of bridge config.
 *
 * @generated from message opinit.ophost.v1.BridgeConfig
 */
export class BridgeConfig extends Message<BridgeConfig> {
  /**
   * The address of the challenger.
   *
   * @generated from field: string challenger = 1;
   */
  challenger = "";

  /**
   * The address of the proposer.
   *
   * @generated from field: string proposer = 2;
   */
  proposer = "";

  /**
   * The time interval at which checkpoints must be submitted.
   * NOTE: this param is currently not used, but will be used for challenge in future.
   *
   * @generated from field: google.protobuf.Duration submission_interval = 3;
   */
  submissionInterval?: Duration;

  /**
   * The minium time duration that must elapse before a withdrawal can be finalized.
   *
   * @generated from field: google.protobuf.Duration finalization_period = 4;
   */
  finalizationPeriod?: Duration;

  /**
   * The time of the first l2 block recorded.
   * NOTE: this param is currently not used, but will be used for challenge in future.
   *
   * @generated from field: google.protobuf.Timestamp submission_start_time = 5;
   */
  submissionStartTime?: Timestamp;

  /**
   * Normally it is IBC channelID for permissioned IBC relayer.
   *
   * @generated from field: bytes metadata = 6;
   */
  metadata = new Uint8Array(0);

  constructor(data?: PartialMessage<BridgeConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "opinit.ophost.v1.BridgeConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "challenger", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "proposer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "submission_interval", kind: "message", T: Duration },
    { no: 4, name: "finalization_period", kind: "message", T: Duration },
    { no: 5, name: "submission_start_time", kind: "message", T: Timestamp },
    { no: 6, name: "metadata", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BridgeConfig {
    return new BridgeConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BridgeConfig {
    return new BridgeConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BridgeConfig {
    return new BridgeConfig().fromJsonString(jsonString, options);
  }

  static equals(a: BridgeConfig | PlainMessage<BridgeConfig> | undefined, b: BridgeConfig | PlainMessage<BridgeConfig> | undefined): boolean {
    return proto3.util.equals(BridgeConfig, a, b);
  }
}

/**
 * TokenPair defines l1 and l2 token pair
 *
 * @generated from message opinit.ophost.v1.TokenPair
 */
export class TokenPair extends Message<TokenPair> {
  /**
   * @generated from field: string l1_denom = 1;
   */
  l1Denom = "";

  /**
   * @generated from field: string l2_denom = 2;
   */
  l2Denom = "";

  constructor(data?: PartialMessage<TokenPair>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "opinit.ophost.v1.TokenPair";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "l1_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "l2_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TokenPair {
    return new TokenPair().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TokenPair {
    return new TokenPair().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TokenPair {
    return new TokenPair().fromJsonString(jsonString, options);
  }

  static equals(a: TokenPair | PlainMessage<TokenPair> | undefined, b: TokenPair | PlainMessage<TokenPair> | undefined): boolean {
    return proto3.util.equals(TokenPair, a, b);
  }
}

/**
 * Output is a l2 block submitted by proposer.
 *
 * @generated from message opinit.ophost.v1.Output
 */
export class Output extends Message<Output> {
  /**
   * Hash of the l2 output.
   *
   * @generated from field: bytes output_root = 1;
   */
  outputRoot = new Uint8Array(0);

  /**
   * Timestamp of the l1 block that the output root was submitted in.
   *
   * @generated from field: google.protobuf.Timestamp l1_block_time = 2;
   */
  l1BlockTime?: Timestamp;

  /**
   * The l2 block number that the output root was submitted in.
   *
   * @generated from field: uint64 l2_block_number = 3;
   */
  l2BlockNumber = protoInt64.zero;

  constructor(data?: PartialMessage<Output>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "opinit.ophost.v1.Output";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "output_root", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "l1_block_time", kind: "message", T: Timestamp },
    { no: 3, name: "l2_block_number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Output {
    return new Output().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Output {
    return new Output().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Output {
    return new Output().fromJsonString(jsonString, options);
  }

  static equals(a: Output | PlainMessage<Output> | undefined, b: Output | PlainMessage<Output> | undefined): boolean {
    return proto3.util.equals(Output, a, b);
  }
}

