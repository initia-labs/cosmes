// @generated by protoc-gen-es v1.7.0 with parameter "target=ts"
// @generated from file opinit/ophost/v1/auth.proto (package opinit.ophost.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { BaseAccount } from "../../../cosmos/auth/v1beta1/auth_pb.js";

/**
 * BridgeAccount defines an account for bridge that holds coins without pubkey.
 *
 * @generated from message opinit.ophost.v1.BridgeAccount
 */
export class BridgeAccount extends Message<BridgeAccount> {
  /**
   * @generated from field: cosmos.auth.v1beta1.BaseAccount base_account = 1;
   */
  baseAccount?: BaseAccount;

  constructor(data?: PartialMessage<BridgeAccount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "opinit.ophost.v1.BridgeAccount";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "base_account", kind: "message", T: BaseAccount },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BridgeAccount {
    return new BridgeAccount().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BridgeAccount {
    return new BridgeAccount().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BridgeAccount {
    return new BridgeAccount().fromJsonString(jsonString, options);
  }

  static equals(a: BridgeAccount | PlainMessage<BridgeAccount> | undefined, b: BridgeAccount | PlainMessage<BridgeAccount> | undefined): boolean {
    return proto3.util.equals(BridgeAccount, a, b);
  }
}

