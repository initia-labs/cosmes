// @generated by protoc-gen-es v1.7.0 with parameter "target=ts"
// @generated from file opinit/opchild/v1/query.proto (package opinit.opchild.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination_pb.js";
import { Params, Validator } from "./types_pb.js";

/**
 * QueryValidatorsRequest is request type for Query/Validators RPC method.
 *
 * @generated from message opinit.opchild.v1.QueryValidatorsRequest
 */
export class QueryValidatorsRequest extends Message<QueryValidatorsRequest> {
  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryValidatorsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "opinit.opchild.v1.QueryValidatorsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryValidatorsRequest {
    return new QueryValidatorsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryValidatorsRequest {
    return new QueryValidatorsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryValidatorsRequest {
    return new QueryValidatorsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryValidatorsRequest | PlainMessage<QueryValidatorsRequest> | undefined, b: QueryValidatorsRequest | PlainMessage<QueryValidatorsRequest> | undefined): boolean {
    return proto3.util.equals(QueryValidatorsRequest, a, b);
  }
}

/**
 * QueryValidatorsResponse is response type for the Query/Validators RPC method
 *
 * @generated from message opinit.opchild.v1.QueryValidatorsResponse
 */
export class QueryValidatorsResponse extends Message<QueryValidatorsResponse> {
  /**
   * validators contains all the queried validators.
   *
   * @generated from field: repeated opinit.opchild.v1.Validator validators = 1;
   */
  validators: Validator[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryValidatorsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "opinit.opchild.v1.QueryValidatorsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "validators", kind: "message", T: Validator, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryValidatorsResponse {
    return new QueryValidatorsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryValidatorsResponse {
    return new QueryValidatorsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryValidatorsResponse {
    return new QueryValidatorsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryValidatorsResponse | PlainMessage<QueryValidatorsResponse> | undefined, b: QueryValidatorsResponse | PlainMessage<QueryValidatorsResponse> | undefined): boolean {
    return proto3.util.equals(QueryValidatorsResponse, a, b);
  }
}

/**
 * QueryValidatorRequest is response type for the Query/Validator RPC method
 *
 * @generated from message opinit.opchild.v1.QueryValidatorRequest
 */
export class QueryValidatorRequest extends Message<QueryValidatorRequest> {
  /**
   * validator_addr defines the validator address to query for.
   *
   * @generated from field: string validator_addr = 1;
   */
  validatorAddr = "";

  constructor(data?: PartialMessage<QueryValidatorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "opinit.opchild.v1.QueryValidatorRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "validator_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryValidatorRequest {
    return new QueryValidatorRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryValidatorRequest {
    return new QueryValidatorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryValidatorRequest {
    return new QueryValidatorRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryValidatorRequest | PlainMessage<QueryValidatorRequest> | undefined, b: QueryValidatorRequest | PlainMessage<QueryValidatorRequest> | undefined): boolean {
    return proto3.util.equals(QueryValidatorRequest, a, b);
  }
}

/**
 * QueryValidatorResponse is response type for the Query/Validator RPC method
 *
 * @generated from message opinit.opchild.v1.QueryValidatorResponse
 */
export class QueryValidatorResponse extends Message<QueryValidatorResponse> {
  /**
   * validator defines the validator info.
   *
   * @generated from field: opinit.opchild.v1.Validator validator = 1;
   */
  validator?: Validator;

  constructor(data?: PartialMessage<QueryValidatorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "opinit.opchild.v1.QueryValidatorResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "validator", kind: "message", T: Validator },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryValidatorResponse {
    return new QueryValidatorResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryValidatorResponse {
    return new QueryValidatorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryValidatorResponse {
    return new QueryValidatorResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryValidatorResponse | PlainMessage<QueryValidatorResponse> | undefined, b: QueryValidatorResponse | PlainMessage<QueryValidatorResponse> | undefined): boolean {
    return proto3.util.equals(QueryValidatorResponse, a, b);
  }
}

/**
 * QueryParamsRequest is request type for the Query/Params RPC method.
 *
 * @generated from message opinit.opchild.v1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "opinit.opchild.v1.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 *
 * @generated from message opinit.opchild.v1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params holds all the parameters of this module.
   *
   * @generated from field: opinit.opchild.v1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "opinit.opchild.v1.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

