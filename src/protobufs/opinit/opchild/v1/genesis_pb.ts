// @generated by protoc-gen-es v1.7.0 with parameter "target=ts"
// @generated from file opinit/opchild/v1/genesis.proto (package opinit.opchild.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Params, Validator } from "./types_pb.js";

/**
 * GenesisState defines the rollup module's genesis state.
 *
 * @generated from message opinit.opchild.v1.GenesisState
 */
export class GenesisState extends Message<GenesisState> {
  /**
   * params defines all the parameters of related to deposit.
   *
   * @generated from field: opinit.opchild.v1.Params params = 1;
   */
  params?: Params;

  /**
   * last_validator_powers is a special index that provides a historical list
   * of the last-block's bonded validators.
   *
   * @generated from field: repeated opinit.opchild.v1.LastValidatorPower last_validator_powers = 2;
   */
  lastValidatorPowers: LastValidatorPower[] = [];

  /**
   * delegations defines the validator set at genesis.
   *
   * @generated from field: repeated opinit.opchild.v1.Validator validators = 3;
   */
  validators: Validator[] = [];

  /**
   * @generated from field: bool exported = 5;
   */
  exported = false;

  /**
   * @generated from field: uint64 next_l2_sequence = 6;
   */
  nextL2Sequence = protoInt64.zero;

  /**
   * @generated from field: repeated uint64 finalized_l1_sequences = 7;
   */
  finalizedL1Sequences: bigint[] = [];

  constructor(data?: PartialMessage<GenesisState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "opinit.opchild.v1.GenesisState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
    { no: 2, name: "last_validator_powers", kind: "message", T: LastValidatorPower, repeated: true },
    { no: 3, name: "validators", kind: "message", T: Validator, repeated: true },
    { no: 5, name: "exported", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "next_l2_sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "finalized_l1_sequences", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisState {
    return new GenesisState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisState | PlainMessage<GenesisState> | undefined, b: GenesisState | PlainMessage<GenesisState> | undefined): boolean {
    return proto3.util.equals(GenesisState, a, b);
  }
}

/**
 * LastValidatorPower required for validator set update logic.
 *
 * @generated from message opinit.opchild.v1.LastValidatorPower
 */
export class LastValidatorPower extends Message<LastValidatorPower> {
  /**
   * address is the address of the validator.
   *
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * power defines the power of the validator.
   *
   * @generated from field: int64 power = 2;
   */
  power = protoInt64.zero;

  constructor(data?: PartialMessage<LastValidatorPower>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "opinit.opchild.v1.LastValidatorPower";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "power", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LastValidatorPower {
    return new LastValidatorPower().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LastValidatorPower {
    return new LastValidatorPower().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LastValidatorPower {
    return new LastValidatorPower().fromJsonString(jsonString, options);
  }

  static equals(a: LastValidatorPower | PlainMessage<LastValidatorPower> | undefined, b: LastValidatorPower | PlainMessage<LastValidatorPower> | undefined): boolean {
    return proto3.util.equals(LastValidatorPower, a, b);
  }
}

