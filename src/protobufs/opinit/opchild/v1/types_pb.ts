// @generated by protoc-gen-es v1.7.0 with parameter "target=ts"
// @generated from file opinit/opchild/v1/types.proto (package opinit.opchild.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { DecCoin } from "../../../cosmos/base/v1beta1/coin_pb.js";
import { Header } from "../../../tendermint/types/types_pb.js";
import { ValidatorUpdate } from "../../../tendermint/abci/types_pb.js";

/**
 * Params defines the set of move parameters.
 *
 * @generated from message opinit.opchild.v1.Params
 */
export class Params extends Message<Params> {
  /**
   * max_validators is the maximum number of validators.
   *
   * @generated from field: uint32 max_validators = 1;
   */
  maxValidators = 0;

  /**
   * historical_entries is the number of historical entries to persist.
   *
   * @generated from field: uint32 historical_entries = 2;
   */
  historicalEntries = 0;

  /**
   * @generated from field: repeated cosmos.base.v1beta1.DecCoin min_gas_prices = 3;
   */
  minGasPrices: DecCoin[] = [];

  /**
   * the account address of bridge executor who can execute permissioned bridge
   * messages.
   *
   * @generated from field: string bridge_executor = 4;
   */
  bridgeExecutor = "";

  constructor(data?: PartialMessage<Params>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "opinit.opchild.v1.Params";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "max_validators", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "historical_entries", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "min_gas_prices", kind: "message", T: DecCoin, repeated: true },
    { no: 4, name: "bridge_executor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Params {
    return new Params().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJsonString(jsonString, options);
  }

  static equals(a: Params | PlainMessage<Params> | undefined, b: Params | PlainMessage<Params> | undefined): boolean {
    return proto3.util.equals(Params, a, b);
  }
}

/**
 * HistoricalInfo contains header and validator information for a given block.
 * It is stored as part of rollup module's state, which persists the `n` most
 * recent HistoricalInfo
 * (`n` is set by the rollup module's `historical_entries` parameter).
 *
 * @generated from message opinit.opchild.v1.HistoricalInfo
 */
export class HistoricalInfo extends Message<HistoricalInfo> {
  /**
   * @generated from field: tendermint.types.Header header = 1;
   */
  header?: Header;

  /**
   * @generated from field: repeated opinit.opchild.v1.Validator valset = 2;
   */
  valset: Validator[] = [];

  constructor(data?: PartialMessage<HistoricalInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "opinit.opchild.v1.HistoricalInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "header", kind: "message", T: Header },
    { no: 2, name: "valset", kind: "message", T: Validator, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HistoricalInfo {
    return new HistoricalInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HistoricalInfo {
    return new HistoricalInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HistoricalInfo {
    return new HistoricalInfo().fromJsonString(jsonString, options);
  }

  static equals(a: HistoricalInfo | PlainMessage<HistoricalInfo> | undefined, b: HistoricalInfo | PlainMessage<HistoricalInfo> | undefined): boolean {
    return proto3.util.equals(HistoricalInfo, a, b);
  }
}

/**
 * Validator defines a validator, together with the total amount of the
 * Validator's bond shares and their exchange rate to coins. Slashing results in
 * a decrease in the exchange rate, allowing correct calculation of future
 * undelegations without iterating over delegators. When coins are delegated to
 * this validator, the validator is credited with a delegation whose number of
 * bond shares is based on the amount of coins delegated divided by the current
 * exchange rate. Voting power can be calculated as total bonded shares
 * multiplied by exchange rate.
 *
 * @generated from message opinit.opchild.v1.Validator
 */
export class Validator extends Message<Validator> {
  /**
   * @generated from field: string moniker = 1;
   */
  moniker = "";

  /**
   * operator_address defines the address of the validator's operator;
   * bech encoded in JSON.
   *
   * @generated from field: string operator_address = 2;
   */
  operatorAddress = "";

  /**
   * consensus_pubkey is the consensus public key of the validator,
   * as a Protobuf Any.
   *
   * @generated from field: google.protobuf.Any consensus_pubkey = 3;
   */
  consensusPubkey?: Any;

  /**
   * @generated from field: int64 cons_power = 4;
   */
  consPower = protoInt64.zero;

  constructor(data?: PartialMessage<Validator>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "opinit.opchild.v1.Validator";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "moniker", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "operator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "consensus_pubkey", kind: "message", T: Any },
    { no: 4, name: "cons_power", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Validator {
    return new Validator().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Validator {
    return new Validator().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Validator {
    return new Validator().fromJsonString(jsonString, options);
  }

  static equals(a: Validator | PlainMessage<Validator> | undefined, b: Validator | PlainMessage<Validator> | undefined): boolean {
    return proto3.util.equals(Validator, a, b);
  }
}

/**
 * ValidatorUpdates defines an array of abci.ValidatorUpdate objects.
 * TODO: explore moving this to proto/cosmos/base to separate modules
 * from tendermint dependence
 *
 * @generated from message opinit.opchild.v1.ValidatorUpdates
 */
export class ValidatorUpdates extends Message<ValidatorUpdates> {
  /**
   * @generated from field: repeated tendermint.abci.ValidatorUpdate updates = 1;
   */
  updates: ValidatorUpdate[] = [];

  constructor(data?: PartialMessage<ValidatorUpdates>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "opinit.opchild.v1.ValidatorUpdates";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "updates", kind: "message", T: ValidatorUpdate, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidatorUpdates {
    return new ValidatorUpdates().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidatorUpdates {
    return new ValidatorUpdates().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidatorUpdates {
    return new ValidatorUpdates().fromJsonString(jsonString, options);
  }

  static equals(a: ValidatorUpdates | PlainMessage<ValidatorUpdates> | undefined, b: ValidatorUpdates | PlainMessage<ValidatorUpdates> | undefined): boolean {
    return proto3.util.equals(ValidatorUpdates, a, b);
  }
}

