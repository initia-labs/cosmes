// @generated by protoc-gen-es v1.7.0 with parameter "target=ts"
// @generated from file ibc/applications/fetchprice/consumer/v1/tx.proto (package ibc.applications.fetchprice.consumer.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Height } from "../../../../core/client/v1/client_pb.js";

/**
 * MsgFetchPrice defines a msg to fetch a oracle price from provider chain
 *
 * @generated from message ibc.applications.fetchprice.consumer.v1.MsgFetchPrice
 */
export class MsgFetchPrice extends Message<MsgFetchPrice> {
  /**
   * the port on which the packet will be sent
   *
   * @generated from field: string source_port = 1;
   */
  sourcePort = "";

  /**
   * the channel by which the packet will be sent
   *
   * @generated from field: string source_channel = 2;
   */
  sourceChannel = "";

  /**
   * the list of currency ids to fetch price
   *
   * @generated from field: repeated string currency_ids = 3;
   */
  currencyIds: string[] = [];

  /**
   * the sender address
   *
   * @generated from field: string sender = 4;
   */
  sender = "";

  /**
   * Timeout height relative to the current block height.
   * The timeout is disabled when set to 0.
   *
   * @generated from field: ibc.core.client.v1.Height timeout_height = 5;
   */
  timeoutHeight?: Height;

  /**
   * Timeout timestamp in absolute nanoseconds since unix epoch.
   * The timeout is disabled when set to 0.
   *
   * @generated from field: uint64 timeout_timestamp = 6;
   */
  timeoutTimestamp = protoInt64.zero;

  /**
   * optional memo
   *
   * @generated from field: string memo = 7;
   */
  memo = "";

  constructor(data?: PartialMessage<MsgFetchPrice>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.fetchprice.consumer.v1.MsgFetchPrice";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "source_port", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "source_channel", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "currency_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "timeout_height", kind: "message", T: Height },
    { no: 6, name: "timeout_timestamp", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgFetchPrice {
    return new MsgFetchPrice().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgFetchPrice {
    return new MsgFetchPrice().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgFetchPrice {
    return new MsgFetchPrice().fromJsonString(jsonString, options);
  }

  static equals(a: MsgFetchPrice | PlainMessage<MsgFetchPrice> | undefined, b: MsgFetchPrice | PlainMessage<MsgFetchPrice> | undefined): boolean {
    return proto3.util.equals(MsgFetchPrice, a, b);
  }
}

/**
 * MsgFetchPriceResponse defines the Msg/FetchPrice response type.
 *
 * @generated from message ibc.applications.fetchprice.consumer.v1.MsgFetchPriceResponse
 */
export class MsgFetchPriceResponse extends Message<MsgFetchPriceResponse> {
  /**
   * sequence number of the fetch price packet sent
   *
   * @generated from field: uint64 sequence = 1;
   */
  sequence = protoInt64.zero;

  constructor(data?: PartialMessage<MsgFetchPriceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.fetchprice.consumer.v1.MsgFetchPriceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgFetchPriceResponse {
    return new MsgFetchPriceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgFetchPriceResponse {
    return new MsgFetchPriceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgFetchPriceResponse {
    return new MsgFetchPriceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgFetchPriceResponse | PlainMessage<MsgFetchPriceResponse> | undefined, b: MsgFetchPriceResponse | PlainMessage<MsgFetchPriceResponse> | undefined): boolean {
    return proto3.util.equals(MsgFetchPriceResponse, a, b);
  }
}

