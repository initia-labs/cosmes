// @generated by protoc-gen-es v1.7.0 with parameter "target=ts"
// @generated from file ibc/applications/fetchprice/v1/packet.proto (package ibc.applications.fetchprice.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { CurrencyPrice } from "./types_pb.js";

/**
 * FetchPricePacketData defines a struct for the packet payload
 * to fetch the oracle prices.
 *
 * @generated from message ibc.applications.fetchprice.v1.FetchPricePacketData
 */
export class FetchPricePacketData extends Message<FetchPricePacketData> {
  /**
   * The currency id is the string with "BASE/QUOTE" format.
   *
   * @generated from field: repeated string currency_ids = 1;
   */
  currencyIds: string[] = [];

  /**
   * optional memo field for future use
   *
   * @generated from field: string memo = 2;
   */
  memo = "";

  constructor(data?: PartialMessage<FetchPricePacketData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.fetchprice.v1.FetchPricePacketData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "currency_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FetchPricePacketData {
    return new FetchPricePacketData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FetchPricePacketData {
    return new FetchPricePacketData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FetchPricePacketData {
    return new FetchPricePacketData().fromJsonString(jsonString, options);
  }

  static equals(a: FetchPricePacketData | PlainMessage<FetchPricePacketData> | undefined, b: FetchPricePacketData | PlainMessage<FetchPricePacketData> | undefined): boolean {
    return proto3.util.equals(FetchPricePacketData, a, b);
  }
}

/**
 * FetchPriceAckData defines a sturct for the ack payload
 * of FetchPricePacket.
 *
 * @generated from message ibc.applications.fetchprice.v1.FetchPriceAckData
 */
export class FetchPriceAckData extends Message<FetchPriceAckData> {
  /**
   * @generated from field: repeated ibc.applications.fetchprice.v1.CurrencyPrice currency_prices = 1;
   */
  currencyPrices: CurrencyPrice[] = [];

  constructor(data?: PartialMessage<FetchPriceAckData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.fetchprice.v1.FetchPriceAckData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "currency_prices", kind: "message", T: CurrencyPrice, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FetchPriceAckData {
    return new FetchPriceAckData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FetchPriceAckData {
    return new FetchPriceAckData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FetchPriceAckData {
    return new FetchPriceAckData().fromJsonString(jsonString, options);
  }

  static equals(a: FetchPriceAckData | PlainMessage<FetchPriceAckData> | undefined, b: FetchPriceAckData | PlainMessage<FetchPriceAckData> | undefined): boolean {
    return proto3.util.equals(FetchPriceAckData, a, b);
  }
}

