// @generated by protoc-gen-es v1.7.0 with parameter "target=ts"
// @generated from file ibc/applications/fetchprice/v1/types.proto (package ibc.applications.fetchprice.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * CurrencyPrice is the information necessary for initialization of a
 * CurrencyPrice.
 *
 * @generated from message ibc.applications.fetchprice.v1.CurrencyPrice
 */
export class CurrencyPrice extends Message<CurrencyPrice> {
  /**
   * The currency id is the string with "BASE/QUOTE" format.
   *
   * @generated from field: string currency_id = 1;
   */
  currencyId = "";

  /**
   * @generated from field: ibc.applications.fetchprice.v1.QuotePrice quote_price = 2;
   */
  quotePrice?: QuotePrice;

  constructor(data?: PartialMessage<CurrencyPrice>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.fetchprice.v1.CurrencyPrice";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "currency_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "quote_price", kind: "message", T: QuotePrice },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CurrencyPrice {
    return new CurrencyPrice().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CurrencyPrice {
    return new CurrencyPrice().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CurrencyPrice {
    return new CurrencyPrice().fromJsonString(jsonString, options);
  }

  static equals(a: CurrencyPrice | PlainMessage<CurrencyPrice> | undefined, b: CurrencyPrice | PlainMessage<CurrencyPrice> | undefined): boolean {
    return proto3.util.equals(CurrencyPrice, a, b);
  }
}

/**
 * QuotePrice is the representation of the aggregated prices for a CurrencyPair,
 * where price represents the price of Base in terms of Quote
 *
 * @generated from message ibc.applications.fetchprice.v1.QuotePrice
 */
export class QuotePrice extends Message<QuotePrice> {
  /**
   * @generated from field: string price = 1;
   */
  price = "";

  /**
   * decimals represents the number of decimals that the quote-price is
   * represented in. For Pairs where ETHEREUM is the quote this will be 18,
   * otherwise it will be 8.
   *
   * @generated from field: uint64 decimals = 2;
   */
  decimals = protoInt64.zero;

  /**
   * BlockTimestamp tracks the block height associated with this price update.
   * We include block timestamp alongside the price to ensure that smart
   * contracts and applications are not utilizing stale oracle prices.
   *
   * @generated from field: google.protobuf.Timestamp block_timestamp = 3;
   */
  blockTimestamp?: Timestamp;

  /**
   * BlockHeight is block height of provider chain.
   *
   * @generated from field: uint64 block_height = 4;
   */
  blockHeight = protoInt64.zero;

  constructor(data?: PartialMessage<QuotePrice>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.fetchprice.v1.QuotePrice";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "decimals", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "block_timestamp", kind: "message", T: Timestamp },
    { no: 4, name: "block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuotePrice {
    return new QuotePrice().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuotePrice {
    return new QuotePrice().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuotePrice {
    return new QuotePrice().fromJsonString(jsonString, options);
  }

  static equals(a: QuotePrice | PlainMessage<QuotePrice> | undefined, b: QuotePrice | PlainMessage<QuotePrice> | undefined): boolean {
    return proto3.util.equals(QuotePrice, a, b);
  }
}

