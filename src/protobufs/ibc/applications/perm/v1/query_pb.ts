// @generated by protoc-gen-es v1.7.0 with parameter "target=ts"
// @generated from file ibc/applications/perm/v1/query.proto (package ibc.applications.perm.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { ChannelRelayer } from "./types_pb.js";

/**
 * QueryChannelRelayerRequest is the request type for the Query/ChannelRelayer RPC
 * method
 *
 * @generated from message ibc.applications.perm.v1.QueryChannelRelayerRequest
 */
export class QueryChannelRelayerRequest extends Message<QueryChannelRelayerRequest> {
  /**
   * channel is ibc channel id.
   *
   * @generated from field: string channel = 1;
   */
  channel = "";

  constructor(data?: PartialMessage<QueryChannelRelayerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.perm.v1.QueryChannelRelayerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "channel", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryChannelRelayerRequest {
    return new QueryChannelRelayerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryChannelRelayerRequest {
    return new QueryChannelRelayerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryChannelRelayerRequest {
    return new QueryChannelRelayerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryChannelRelayerRequest | PlainMessage<QueryChannelRelayerRequest> | undefined, b: QueryChannelRelayerRequest | PlainMessage<QueryChannelRelayerRequest> | undefined): boolean {
    return proto3.util.equals(QueryChannelRelayerRequest, a, b);
  }
}

/**
 * QueryChannelRelayerResponse is the response type for the Query/ChannelRelayer RPC
 * method.
 *
 * @generated from message ibc.applications.perm.v1.QueryChannelRelayerResponse
 */
export class QueryChannelRelayerResponse extends Message<QueryChannelRelayerResponse> {
  /**
   * class_trace returns the requested class id trace information.
   *
   * @generated from field: ibc.applications.perm.v1.ChannelRelayer channel_relayer = 1;
   */
  channelRelayer?: ChannelRelayer;

  constructor(data?: PartialMessage<QueryChannelRelayerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.perm.v1.QueryChannelRelayerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "channel_relayer", kind: "message", T: ChannelRelayer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryChannelRelayerResponse {
    return new QueryChannelRelayerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryChannelRelayerResponse {
    return new QueryChannelRelayerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryChannelRelayerResponse {
    return new QueryChannelRelayerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryChannelRelayerResponse | PlainMessage<QueryChannelRelayerResponse> | undefined, b: QueryChannelRelayerResponse | PlainMessage<QueryChannelRelayerResponse> | undefined): boolean {
    return proto3.util.equals(QueryChannelRelayerResponse, a, b);
  }
}

