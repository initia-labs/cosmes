// @generated by protoc-gen-es v1.7.0 with parameter "target=ts"
// @generated from file ibc/applications/perm/v1/types.proto (package ibc.applications.perm.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * ChannelRelayer is used to specifiy the permissioned relayer for
 * the specific channel.
 *
 * @generated from message ibc.applications.perm.v1.ChannelRelayer
 */
export class ChannelRelayer extends Message<ChannelRelayer> {
  /**
   * @generated from field: string channel = 1;
   */
  channel = "";

  /**
   * @generated from field: string relayer = 2;
   */
  relayer = "";

  constructor(data?: PartialMessage<ChannelRelayer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.perm.v1.ChannelRelayer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "channel", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "relayer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChannelRelayer {
    return new ChannelRelayer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChannelRelayer {
    return new ChannelRelayer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChannelRelayer {
    return new ChannelRelayer().fromJsonString(jsonString, options);
  }

  static equals(a: ChannelRelayer | PlainMessage<ChannelRelayer> | undefined, b: ChannelRelayer | PlainMessage<ChannelRelayer> | undefined): boolean {
    return proto3.util.equals(ChannelRelayer, a, b);
  }
}

