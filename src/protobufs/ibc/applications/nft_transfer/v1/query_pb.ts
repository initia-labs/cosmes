// @generated by protoc-gen-es v1.7.0 with parameter "target=ts"
// @generated from file ibc/applications/nft_transfer/v1/query.proto (package ibc.applications.nft_transfer.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { ClassTrace, Params } from "./types_pb.js";
import { PageRequest, PageResponse } from "../../../../cosmos/base/query/v1beta1/pagination_pb.js";

/**
 * QueryClassTraceRequest is the request type for the Query/ClassTrace RPC
 * method
 *
 * @generated from message ibc.applications.nft_transfer.v1.QueryClassTraceRequest
 */
export class QueryClassTraceRequest extends Message<QueryClassTraceRequest> {
  /**
   * hash (in hex format) of the class id trace information.
   *
   * @generated from field: string hash = 1;
   */
  hash = "";

  constructor(data?: PartialMessage<QueryClassTraceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.nft_transfer.v1.QueryClassTraceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryClassTraceRequest {
    return new QueryClassTraceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryClassTraceRequest {
    return new QueryClassTraceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryClassTraceRequest {
    return new QueryClassTraceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryClassTraceRequest | PlainMessage<QueryClassTraceRequest> | undefined, b: QueryClassTraceRequest | PlainMessage<QueryClassTraceRequest> | undefined): boolean {
    return proto3.util.equals(QueryClassTraceRequest, a, b);
  }
}

/**
 * QueryClassTraceResponse is the response type for the Query/ClassTrace RPC
 * method.
 *
 * @generated from message ibc.applications.nft_transfer.v1.QueryClassTraceResponse
 */
export class QueryClassTraceResponse extends Message<QueryClassTraceResponse> {
  /**
   * class_trace returns the requested class id trace information.
   *
   * @generated from field: ibc.applications.nft_transfer.v1.ClassTrace class_trace = 1;
   */
  classTrace?: ClassTrace;

  constructor(data?: PartialMessage<QueryClassTraceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.nft_transfer.v1.QueryClassTraceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "class_trace", kind: "message", T: ClassTrace },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryClassTraceResponse {
    return new QueryClassTraceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryClassTraceResponse {
    return new QueryClassTraceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryClassTraceResponse {
    return new QueryClassTraceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryClassTraceResponse | PlainMessage<QueryClassTraceResponse> | undefined, b: QueryClassTraceResponse | PlainMessage<QueryClassTraceResponse> | undefined): boolean {
    return proto3.util.equals(QueryClassTraceResponse, a, b);
  }
}

/**
 * QueryClassTracesRequest is the request type for the Query/ClassTraces RPC
 * method
 *
 * @generated from message ibc.applications.nft_transfer.v1.QueryClassTracesRequest
 */
export class QueryClassTracesRequest extends Message<QueryClassTracesRequest> {
  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryClassTracesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.nft_transfer.v1.QueryClassTracesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryClassTracesRequest {
    return new QueryClassTracesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryClassTracesRequest {
    return new QueryClassTracesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryClassTracesRequest {
    return new QueryClassTracesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryClassTracesRequest | PlainMessage<QueryClassTracesRequest> | undefined, b: QueryClassTracesRequest | PlainMessage<QueryClassTracesRequest> | undefined): boolean {
    return proto3.util.equals(QueryClassTracesRequest, a, b);
  }
}

/**
 * QueryClassTracesResponse is the response type for the Query/ClassTraces RPC
 * method.
 *
 * @generated from message ibc.applications.nft_transfer.v1.QueryClassTracesResponse
 */
export class QueryClassTracesResponse extends Message<QueryClassTracesResponse> {
  /**
   * class_traces returns all class id traces information.
   *
   * @generated from field: repeated ibc.applications.nft_transfer.v1.ClassTrace class_traces = 1;
   */
  classTraces: ClassTrace[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryClassTracesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.nft_transfer.v1.QueryClassTracesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "class_traces", kind: "message", T: ClassTrace, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryClassTracesResponse {
    return new QueryClassTracesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryClassTracesResponse {
    return new QueryClassTracesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryClassTracesResponse {
    return new QueryClassTracesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryClassTracesResponse | PlainMessage<QueryClassTracesResponse> | undefined, b: QueryClassTracesResponse | PlainMessage<QueryClassTracesResponse> | undefined): boolean {
    return proto3.util.equals(QueryClassTracesResponse, a, b);
  }
}

/**
 * QueryClassHashRequest is the request type for the Query/ClassHash RPC
 * method
 *
 * @generated from message ibc.applications.nft_transfer.v1.QueryClassHashRequest
 */
export class QueryClassHashRequest extends Message<QueryClassHashRequest> {
  /**
   * The class id trace ([port_id]/[channel_id])+/[class_id]
   *
   * @generated from field: string trace = 1;
   */
  trace = "";

  constructor(data?: PartialMessage<QueryClassHashRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.nft_transfer.v1.QueryClassHashRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "trace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryClassHashRequest {
    return new QueryClassHashRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryClassHashRequest {
    return new QueryClassHashRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryClassHashRequest {
    return new QueryClassHashRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryClassHashRequest | PlainMessage<QueryClassHashRequest> | undefined, b: QueryClassHashRequest | PlainMessage<QueryClassHashRequest> | undefined): boolean {
    return proto3.util.equals(QueryClassHashRequest, a, b);
  }
}

/**
 * QueryClassHashResponse is the response type for the Query/ClassHash RPC
 * method.
 *
 * @generated from message ibc.applications.nft_transfer.v1.QueryClassHashResponse
 */
export class QueryClassHashResponse extends Message<QueryClassHashResponse> {
  /**
   * hash (in hex format) of the class id trace information.
   *
   * @generated from field: string hash = 1;
   */
  hash = "";

  constructor(data?: PartialMessage<QueryClassHashResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.nft_transfer.v1.QueryClassHashResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryClassHashResponse {
    return new QueryClassHashResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryClassHashResponse {
    return new QueryClassHashResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryClassHashResponse {
    return new QueryClassHashResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryClassHashResponse | PlainMessage<QueryClassHashResponse> | undefined, b: QueryClassHashResponse | PlainMessage<QueryClassHashResponse> | undefined): boolean {
    return proto3.util.equals(QueryClassHashResponse, a, b);
  }
}

/**
 * QueryEscrowAddressRequest is the request type for the EscrowAddress RPC method.
 *
 * @generated from message ibc.applications.nft_transfer.v1.QueryEscrowAddressRequest
 */
export class QueryEscrowAddressRequest extends Message<QueryEscrowAddressRequest> {
  /**
   * unique port identifier
   *
   * @generated from field: string port_id = 1;
   */
  portId = "";

  /**
   * unique channel identifier
   *
   * @generated from field: string channel_id = 2;
   */
  channelId = "";

  constructor(data?: PartialMessage<QueryEscrowAddressRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.nft_transfer.v1.QueryEscrowAddressRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryEscrowAddressRequest {
    return new QueryEscrowAddressRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryEscrowAddressRequest {
    return new QueryEscrowAddressRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryEscrowAddressRequest {
    return new QueryEscrowAddressRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryEscrowAddressRequest | PlainMessage<QueryEscrowAddressRequest> | undefined, b: QueryEscrowAddressRequest | PlainMessage<QueryEscrowAddressRequest> | undefined): boolean {
    return proto3.util.equals(QueryEscrowAddressRequest, a, b);
  }
}

/**
 * QueryEscrowAddressResponse is the response type of the EscrowAddress RPC method.
 *
 * @generated from message ibc.applications.nft_transfer.v1.QueryEscrowAddressResponse
 */
export class QueryEscrowAddressResponse extends Message<QueryEscrowAddressResponse> {
  /**
   * the escrow account address
   *
   * @generated from field: string escrow_address = 1;
   */
  escrowAddress = "";

  constructor(data?: PartialMessage<QueryEscrowAddressResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.nft_transfer.v1.QueryEscrowAddressResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "escrow_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryEscrowAddressResponse {
    return new QueryEscrowAddressResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryEscrowAddressResponse {
    return new QueryEscrowAddressResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryEscrowAddressResponse {
    return new QueryEscrowAddressResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryEscrowAddressResponse | PlainMessage<QueryEscrowAddressResponse> | undefined, b: QueryEscrowAddressResponse | PlainMessage<QueryEscrowAddressResponse> | undefined): boolean {
    return proto3.util.equals(QueryEscrowAddressResponse, a, b);
  }
}

/**
 * QueryParamsRequest is the request type for the Query/Params RPC method.
 *
 * @generated from message ibc.applications.nft_transfer.v1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.nft_transfer.v1.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 *
 * @generated from message ibc.applications.nft_transfer.v1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params defines the parameters of the module.
   *
   * @generated from field: ibc.applications.nft_transfer.v1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.nft_transfer.v1.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

