// @generated by protoc-gen-es v1.7.0 with parameter "target=ts"
// @generated from file ibc/applications/nft_transfer/v1/types.proto (package ibc.applications.nft_transfer.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * ClassTrace contains the base class id for ICS721 non fungible tokens and the
 * source tracing information path.
 *
 * @generated from message ibc.applications.nft_transfer.v1.ClassTrace
 */
export class ClassTrace extends Message<ClassTrace> {
  /**
   * path defines the chain of port/channel identifiers used for tracing the
   * source of the non fungible token.
   *
   * @generated from field: string path = 1;
   */
  path = "";

  /**
   * base class id of the relayed non fungible token.
   *
   * @generated from field: string base_class_id = 2;
   */
  baseClassId = "";

  constructor(data?: PartialMessage<ClassTrace>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.nft_transfer.v1.ClassTrace";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "base_class_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClassTrace {
    return new ClassTrace().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClassTrace {
    return new ClassTrace().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClassTrace {
    return new ClassTrace().fromJsonString(jsonString, options);
  }

  static equals(a: ClassTrace | PlainMessage<ClassTrace> | undefined, b: ClassTrace | PlainMessage<ClassTrace> | undefined): boolean {
    return proto3.util.equals(ClassTrace, a, b);
  }
}

/**
 * Params defines the set of IBC nft transfer parameters.
 *
 * @generated from message ibc.applications.nft_transfer.v1.Params
 */
export class Params extends Message<Params> {
  /**
   * send_enabled enables or disables all cross-chain token transfers from this chain.
   *
   * @generated from field: bool send_enabled = 1;
   */
  sendEnabled = false;

  /**
   * receive_enabled enables or disables all cross-chain token transfers to this chain.
   *
   * @generated from field: bool receive_enabled = 2;
   */
  receiveEnabled = false;

  constructor(data?: PartialMessage<Params>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.nft_transfer.v1.Params";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "send_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "receive_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Params {
    return new Params().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJsonString(jsonString, options);
  }

  static equals(a: Params | PlainMessage<Params> | undefined, b: Params | PlainMessage<Params> | undefined): boolean {
    return proto3.util.equals(Params, a, b);
  }
}

