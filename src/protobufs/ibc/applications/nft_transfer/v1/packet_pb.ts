// @generated by protoc-gen-es v1.7.0 with parameter "target=ts"
// @generated from file ibc/applications/nft_transfer/v1/packet.proto (package ibc.applications.nft_transfer.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * NonFungibleTokenPacketData defines a struct for the packet payload
 * See NonFungibleTokenPacketData spec:
 * https://github.com/cosmos/ibc/tree/main/spec/app/ics-721-nft-transfer
 *
 * @generated from message ibc.applications.nft_transfer.v1.NonFungibleTokenPacketData
 */
export class NonFungibleTokenPacketData extends Message<NonFungibleTokenPacketData> {
  /**
   * collection id == extension struct tag
   *
   * @generated from field: string class_id = 1;
   */
  classId = "";

  /**
   * collection url
   *
   * @generated from field: string class_uri = 2;
   */
  classUri = "";

  /**
   * collection data
   *
   * @generated from field: string class_data = 3;
   */
  classData = "";

  /**
   * nft token ids
   *
   * @generated from field: repeated string token_ids = 4;
   */
  tokenIds: string[] = [];

  /**
   * nft token uris
   *
   * @generated from field: repeated string token_uris = 5;
   */
  tokenUris: string[] = [];

  /**
   * nft token data array
   *
   * @generated from field: repeated string token_data = 6;
   */
  tokenData: string[] = [];

  /**
   * sender of nft
   *
   * @generated from field: string sender = 7;
   */
  sender = "";

  /**
   * receiver of nft
   *
   * @generated from field: string receiver = 8;
   */
  receiver = "";

  /**
   * optional memo field for future use
   *
   * @generated from field: string memo = 9;
   */
  memo = "";

  constructor(data?: PartialMessage<NonFungibleTokenPacketData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ibc.applications.nft_transfer.v1.NonFungibleTokenPacketData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "class_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "class_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "class_data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "token_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "token_uris", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "token_data", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 7, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "receiver", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NonFungibleTokenPacketData {
    return new NonFungibleTokenPacketData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NonFungibleTokenPacketData {
    return new NonFungibleTokenPacketData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NonFungibleTokenPacketData {
    return new NonFungibleTokenPacketData().fromJsonString(jsonString, options);
  }

  static equals(a: NonFungibleTokenPacketData | PlainMessage<NonFungibleTokenPacketData> | undefined, b: NonFungibleTokenPacketData | PlainMessage<NonFungibleTokenPacketData> | undefined): boolean {
    return proto3.util.equals(NonFungibleTokenPacketData, a, b);
  }
}

