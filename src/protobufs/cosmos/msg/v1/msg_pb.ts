// @generated by protoc-gen-es v1.7.0 with parameter "target=ts"
// @generated from file cosmos/msg/v1/msg.proto (package cosmos.msg.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { MessageOptions, proto3, ServiceOptions } from "@bufbuild/protobuf";

/**
 * service indicates that the service is a Msg service and that requests
 * must be transported via blockchain transactions rather than gRPC.
 * Tooling can use this annotation to distinguish between Msg services and
 * other types of services via reflection.
 *
 * @generated from extension: bool service = 11110000;
 */
export const service = proto3.makeExtension<ServiceOptions, boolean>(
  "cosmos.msg.v1.service", 
  ServiceOptions, 
  { no: 11110000, kind: "scalar", T: 8 /* ScalarType.BOOL */ },
);

/**
 * signer must be used in cosmos messages in order
 * to signal to external clients which fields in a
 * given cosmos message must be filled with signer
 * information (address).
 * The field must be the protobuf name of the message
 * field extended with this MessageOption.
 * The field must either be of string kind, or of message
 * kind in case the signer information is contained within
 * a message inside the cosmos message.
 *
 * @generated from extension: repeated string signer = 11110000;
 */
export const signer = proto3.makeExtension<MessageOptions, string[]>(
  "cosmos.msg.v1.signer", 
  MessageOptions, 
  { no: 11110000, kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
);

